
ControlLED2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  000001cc  00000240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001cc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000242  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000274  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c14  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000abd  00000000  00000000  00000ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000397  00000000  00000000  000019b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001d4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000055c  00000000  00000000  00001da0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000011f  00000000  00000000  000022fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000241b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	65 c0       	rjmp	.+202    	; 0xcc <__ctors_end>
   2:	00 00       	nop
   4:	78 c0       	rjmp	.+240    	; 0xf6 <__bad_interrupt>
   6:	00 00       	nop
   8:	76 c0       	rjmp	.+236    	; 0xf6 <__bad_interrupt>
   a:	00 00       	nop
   c:	74 c0       	rjmp	.+232    	; 0xf6 <__bad_interrupt>
   e:	00 00       	nop
  10:	72 c0       	rjmp	.+228    	; 0xf6 <__bad_interrupt>
  12:	00 00       	nop
  14:	70 c0       	rjmp	.+224    	; 0xf6 <__bad_interrupt>
  16:	00 00       	nop
  18:	6e c0       	rjmp	.+220    	; 0xf6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6c c0       	rjmp	.+216    	; 0xf6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6a c0       	rjmp	.+212    	; 0xf6 <__bad_interrupt>
  22:	00 00       	nop
  24:	68 c0       	rjmp	.+208    	; 0xf6 <__bad_interrupt>
  26:	00 00       	nop
  28:	66 c0       	rjmp	.+204    	; 0xf6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	64 c0       	rjmp	.+200    	; 0xf6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	62 c0       	rjmp	.+196    	; 0xf6 <__bad_interrupt>
  32:	00 00       	nop
  34:	60 c0       	rjmp	.+192    	; 0xf6 <__bad_interrupt>
  36:	00 00       	nop
  38:	5e c0       	rjmp	.+188    	; 0xf6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5c c0       	rjmp	.+184    	; 0xf6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5a c0       	rjmp	.+180    	; 0xf6 <__bad_interrupt>
  42:	00 00       	nop
  44:	58 c0       	rjmp	.+176    	; 0xf6 <__bad_interrupt>
  46:	00 00       	nop
  48:	56 c0       	rjmp	.+172    	; 0xf6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	54 c0       	rjmp	.+168    	; 0xf6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	52 c0       	rjmp	.+164    	; 0xf6 <__bad_interrupt>
  52:	00 00       	nop
  54:	50 c0       	rjmp	.+160    	; 0xf6 <__bad_interrupt>
  56:	00 00       	nop
  58:	4e c0       	rjmp	.+156    	; 0xf6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4c c0       	rjmp	.+152    	; 0xf6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4a c0       	rjmp	.+148    	; 0xf6 <__bad_interrupt>
  62:	00 00       	nop
  64:	48 c0       	rjmp	.+144    	; 0xf6 <__bad_interrupt>
  66:	00 00       	nop
  68:	46 c0       	rjmp	.+140    	; 0xf6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	44 c0       	rjmp	.+136    	; 0xf6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	42 c0       	rjmp	.+132    	; 0xf6 <__bad_interrupt>
  72:	00 00       	nop
  74:	40 c0       	rjmp	.+128    	; 0xf6 <__bad_interrupt>
  76:	00 00       	nop
  78:	3e c0       	rjmp	.+124    	; 0xf6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3c c0       	rjmp	.+120    	; 0xf6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3a c0       	rjmp	.+116    	; 0xf6 <__bad_interrupt>
  82:	00 00       	nop
  84:	38 c0       	rjmp	.+112    	; 0xf6 <__bad_interrupt>
  86:	00 00       	nop
  88:	36 c0       	rjmp	.+108    	; 0xf6 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	34 c0       	rjmp	.+104    	; 0xf6 <__bad_interrupt>
  8e:	00 00       	nop
  90:	32 c0       	rjmp	.+100    	; 0xf6 <__bad_interrupt>
  92:	00 00       	nop
  94:	30 c0       	rjmp	.+96     	; 0xf6 <__bad_interrupt>
  96:	00 00       	nop
  98:	2e c0       	rjmp	.+92     	; 0xf6 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2c c0       	rjmp	.+88     	; 0xf6 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2a c0       	rjmp	.+84     	; 0xf6 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	28 c0       	rjmp	.+80     	; 0xf6 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	26 c0       	rjmp	.+76     	; 0xf6 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	24 c0       	rjmp	.+72     	; 0xf6 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	22 c0       	rjmp	.+68     	; 0xf6 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	20 c0       	rjmp	.+64     	; 0xf6 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1e c0       	rjmp	.+60     	; 0xf6 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1c c0       	rjmp	.+56     	; 0xf6 <__bad_interrupt>
  be:	00 00       	nop
  c0:	1a c0       	rjmp	.+52     	; 0xf6 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	18 c0       	rjmp	.+48     	; 0xf6 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	16 c0       	rjmp	.+44     	; 0xf6 <__bad_interrupt>
	...

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d1 e2       	ldi	r29, 0x21	; 33
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	12 e0       	ldi	r17, 0x02	; 2
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b2 e0       	ldi	r27, 0x02	; 2
  de:	ec ec       	ldi	r30, 0xCC	; 204
  e0:	f1 e0       	ldi	r31, 0x01	; 1
  e2:	00 e0       	ldi	r16, 0x00	; 0
  e4:	0b bf       	out	0x3b, r16	; 59
  e6:	02 c0       	rjmp	.+4      	; 0xec <__do_copy_data+0x14>
  e8:	07 90       	elpm	r0, Z+
  ea:	0d 92       	st	X+, r0
  ec:	a2 30       	cpi	r26, 0x02	; 2
  ee:	b1 07       	cpc	r27, r17
  f0:	d9 f7       	brne	.-10     	; 0xe8 <__do_copy_data+0x10>
  f2:	12 d0       	rcall	.+36     	; 0x118 <main>
  f4:	69 c0       	rjmp	.+210    	; 0x1c8 <_exit>

000000f6 <__bad_interrupt>:
  f6:	84 cf       	rjmp	.-248    	; 0x0 <__vectors>

000000f8 <switch_hit>:
// Function that returns 1 when switch is pressed
uint8_t switch_hit(void) {
	static uint8_t prev_state = _BV(SW2);
	uint8_t cur_state;
	
	cur_state = PINE & _BV(SW2);
  f8:	8c b1       	in	r24, 0x0c	; 12
  fa:	80 78       	andi	r24, 0x80	; 128
	if(prev_state != cur_state) {
  fc:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 100:	89 17       	cp	r24, r25
 102:	31 f0       	breq	.+12     	; 0x110 <switch_hit+0x18>
		prev_state = cur_state;
 104:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
		if(!cur_state) return 1;
 108:	81 11       	cpse	r24, r1
 10a:	04 c0       	rjmp	.+8      	; 0x114 <switch_hit+0x1c>
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	08 95       	ret
		else return 0;
	}
	else
	return 0;
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	08 95       	ret
	
	cur_state = PINE & _BV(SW2);
	if(prev_state != cur_state) {
		prev_state = cur_state;
		if(!cur_state) return 1;
		else return 0;
 114:	80 e0       	ldi	r24, 0x00	; 0
	}
	else
	return 0;
}
 116:	08 95       	ret

00000118 <main>:
uint8_t switch_hit(void);
uint8_t switch_hit2(void);

// 6. Program to change direction when switch is pressed
int main(void)
{
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
 11c:	00 d0       	rcall	.+0      	; 0x11e <main+0x6>
 11e:	00 d0       	rcall	.+0      	; 0x120 <main+0x8>
 120:	00 d0       	rcall	.+0      	; 0x122 <main+0xa>
 122:	cd b7       	in	r28, 0x3d	; 61
 124:	de b7       	in	r29, 0x3e	; 62
	uint8_t led_index = 0;
	uint8_t direction_index = 0;
	
	// Define LED patterns and direction array
	const uint8_t LED_PATTERNS[4] = {
 126:	8c e0       	ldi	r24, 0x0C	; 12
 128:	89 83       	std	Y+1, r24	; 0x01
 12a:	99 e0       	ldi	r25, 0x09	; 9
 12c:	9a 83       	std	Y+2, r25	; 0x02
 12e:	93 e0       	ldi	r25, 0x03	; 3
 130:	9b 83       	std	Y+3, r25	; 0x03
 132:	96 e0       	ldi	r25, 0x06	; 6
 134:	9c 83       	std	Y+4, r25	; 0x04
		0x0C,   // Pattern 1: LED1,2 ON (1100 in binary)
		0x09,   // Pattern 2: LED1,4 ON (1001 in binary)
		0x03,   // Pattern 3: LED3,4 ON (0011 in binary)
		0x06    // Pattern 4: LED2,3 ON (0110 in binary)
	};
	const uint8_t DIRECTION[2] = {0, 1};  // 0: Forward(++), 1: Reverse(--)
 136:	1d 82       	std	Y+5, r1	; 0x05
 138:	91 e0       	ldi	r25, 0x01	; 1
 13a:	9e 83       	std	Y+6, r25	; 0x06
	
	// Initialize LED ports
	DDRC = _BV(LED1) | _BV(LED2) | _BV(LED3) | _BV(LED4);
 13c:	9f e0       	ldi	r25, 0x0F	; 15
 13e:	97 b9       	out	0x07, r25	; 7
	PORTC = _BV(LED3) | _BV(LED4);  // LED3, LED4 OFF initially
 140:	88 b9       	out	0x08, r24	; 8
	
	// Enable pull-up resistor for SW2
	PORTE |= _BV(SW2);
 142:	8e b1       	in	r24, 0x0e	; 14
 144:	80 68       	ori	r24, 0x80	; 128
 146:	8e b9       	out	0x0e, r24	; 14

// 6. Program to change direction when switch is pressed
int main(void)
{
	uint8_t led_index = 0;
	uint8_t direction_index = 0;
 148:	00 e0       	ldi	r16, 0x00	; 0
uint8_t switch_hit2(void);

// 6. Program to change direction when switch is pressed
int main(void)
{
	uint8_t led_index = 0;
 14a:	10 e0       	ldi	r17, 0x00	; 0
	// Enable pull-up resistor for SW2
	PORTE |= _BV(SW2);
	
	while (1)
	{
		if (switch_hit()) {
 14c:	d5 df       	rcall	.-86     	; 0xf8 <switch_hit>
 14e:	88 23       	and	r24, r24
 150:	21 f0       	breq	.+8      	; 0x15a <main+0x42>
			direction_index = !direction_index;  // Toggle direction
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	01 11       	cpse	r16, r1
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	08 2f       	mov	r16, r24
		}
		
		if (DIRECTION[direction_index]) {
 15a:	e5 e0       	ldi	r30, 0x05	; 5
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	ec 0f       	add	r30, r28
 160:	fd 1f       	adc	r31, r29
 162:	e0 0f       	add	r30, r16
 164:	f1 1d       	adc	r31, r1
 166:	80 81       	ld	r24, Z
 168:	88 23       	and	r24, r24
 16a:	69 f0       	breq	.+26     	; 0x186 <main+0x6e>
			led_index = (led_index + 3) % 4;    // Reverse direction
 16c:	81 2f       	mov	r24, r17
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	03 96       	adiw	r24, 0x03	; 3
 172:	83 70       	andi	r24, 0x03	; 3
 174:	90 78       	andi	r25, 0x80	; 128
 176:	99 23       	and	r25, r25
 178:	24 f4       	brge	.+8      	; 0x182 <main+0x6a>
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	8c 6f       	ori	r24, 0xFC	; 252
 17e:	9f 6f       	ori	r25, 0xFF	; 255
 180:	01 96       	adiw	r24, 0x01	; 1
 182:	18 2f       	mov	r17, r24
 184:	0c c0       	rjmp	.+24     	; 0x19e <main+0x86>
		}
		else {
			led_index = (led_index + 1) % 4;    // Forward direction
 186:	81 2f       	mov	r24, r17
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	01 96       	adiw	r24, 0x01	; 1
 18c:	83 70       	andi	r24, 0x03	; 3
 18e:	90 78       	andi	r25, 0x80	; 128
 190:	99 23       	and	r25, r25
 192:	24 f4       	brge	.+8      	; 0x19c <main+0x84>
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	8c 6f       	ori	r24, 0xFC	; 252
 198:	9f 6f       	ori	r25, 0xFF	; 255
 19a:	01 96       	adiw	r24, 0x01	; 1
 19c:	18 2f       	mov	r17, r24
		}
		
		// Update LED status
		PORTC = (PORTC & 0xF0) | LED_PATTERNS[led_index];
 19e:	88 b1       	in	r24, 0x08	; 8
 1a0:	e1 e0       	ldi	r30, 0x01	; 1
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	ec 0f       	add	r30, r28
 1a6:	fd 1f       	adc	r31, r29
 1a8:	e1 0f       	add	r30, r17
 1aa:	f1 1d       	adc	r31, r1
 1ac:	90 81       	ld	r25, Z
 1ae:	80 7f       	andi	r24, 0xF0	; 240
 1b0:	89 2b       	or	r24, r25
 1b2:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b4:	2f ef       	ldi	r18, 0xFF	; 255
 1b6:	89 e6       	ldi	r24, 0x69	; 105
 1b8:	98 e1       	ldi	r25, 0x18	; 24
 1ba:	21 50       	subi	r18, 0x01	; 1
 1bc:	80 40       	sbci	r24, 0x00	; 0
 1be:	90 40       	sbci	r25, 0x00	; 0
 1c0:	e1 f7       	brne	.-8      	; 0x1ba <main+0xa2>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <main+0xac>
 1c4:	00 00       	nop
 1c6:	c2 cf       	rjmp	.-124    	; 0x14c <main+0x34>

000001c8 <_exit>:
 1c8:	f8 94       	cli

000001ca <__stop_program>:
 1ca:	ff cf       	rjmp	.-2      	; 0x1ca <__stop_program>
