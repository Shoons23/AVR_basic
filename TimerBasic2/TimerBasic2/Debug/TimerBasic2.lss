
TimerBasic2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002fa  00800200  000005aa  0000063e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  008004fa  008004fa  00000938  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000938  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000968  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  000009a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000122c  00000000  00000000  00000a78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d07  00000000  00000000  00001ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000725  00000000  00000000  000029ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d4  00000000  00000000  000030d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000067e  00000000  00000000  000032a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000416  00000000  00000000  00003922  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00003d38  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	65 c0       	rjmp	.+202    	; 0xcc <__ctors_end>
   2:	00 00       	nop
   4:	80 c0       	rjmp	.+256    	; 0x106 <__bad_interrupt>
   6:	00 00       	nop
   8:	7e c0       	rjmp	.+252    	; 0x106 <__bad_interrupt>
   a:	00 00       	nop
   c:	7c c0       	rjmp	.+248    	; 0x106 <__bad_interrupt>
   e:	00 00       	nop
  10:	21 c1       	rjmp	.+578    	; 0x254 <__vector_4>
  12:	00 00       	nop
  14:	78 c0       	rjmp	.+240    	; 0x106 <__bad_interrupt>
  16:	00 00       	nop
  18:	76 c0       	rjmp	.+236    	; 0x106 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	74 c0       	rjmp	.+232    	; 0x106 <__bad_interrupt>
  1e:	00 00       	nop
  20:	25 c1       	rjmp	.+586    	; 0x26c <__vector_8>
  22:	00 00       	nop
  24:	70 c0       	rjmp	.+224    	; 0x106 <__bad_interrupt>
  26:	00 00       	nop
  28:	6e c0       	rjmp	.+220    	; 0x106 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6c c0       	rjmp	.+216    	; 0x106 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6a c0       	rjmp	.+212    	; 0x106 <__bad_interrupt>
  32:	00 00       	nop
  34:	68 c0       	rjmp	.+208    	; 0x106 <__bad_interrupt>
  36:	00 00       	nop
  38:	66 c0       	rjmp	.+204    	; 0x106 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	64 c0       	rjmp	.+200    	; 0x106 <__bad_interrupt>
  3e:	00 00       	nop
  40:	62 c0       	rjmp	.+196    	; 0x106 <__bad_interrupt>
  42:	00 00       	nop
  44:	60 c0       	rjmp	.+192    	; 0x106 <__bad_interrupt>
  46:	00 00       	nop
  48:	5e c0       	rjmp	.+188    	; 0x106 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5c c0       	rjmp	.+184    	; 0x106 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5a c0       	rjmp	.+180    	; 0x106 <__bad_interrupt>
  52:	00 00       	nop
  54:	58 c0       	rjmp	.+176    	; 0x106 <__bad_interrupt>
  56:	00 00       	nop
  58:	56 c0       	rjmp	.+172    	; 0x106 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	54 c0       	rjmp	.+168    	; 0x106 <__bad_interrupt>
  5e:	00 00       	nop
  60:	52 c0       	rjmp	.+164    	; 0x106 <__bad_interrupt>
  62:	00 00       	nop
  64:	50 c0       	rjmp	.+160    	; 0x106 <__bad_interrupt>
  66:	00 00       	nop
  68:	4e c0       	rjmp	.+156    	; 0x106 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4c c0       	rjmp	.+152    	; 0x106 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4a c0       	rjmp	.+148    	; 0x106 <__bad_interrupt>
  72:	00 00       	nop
  74:	48 c0       	rjmp	.+144    	; 0x106 <__bad_interrupt>
  76:	00 00       	nop
  78:	46 c0       	rjmp	.+140    	; 0x106 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	44 c0       	rjmp	.+136    	; 0x106 <__bad_interrupt>
  7e:	00 00       	nop
  80:	42 c0       	rjmp	.+132    	; 0x106 <__bad_interrupt>
  82:	00 00       	nop
  84:	40 c0       	rjmp	.+128    	; 0x106 <__bad_interrupt>
  86:	00 00       	nop
  88:	3e c0       	rjmp	.+124    	; 0x106 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3c c0       	rjmp	.+120    	; 0x106 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3a c0       	rjmp	.+116    	; 0x106 <__bad_interrupt>
  92:	00 00       	nop
  94:	38 c0       	rjmp	.+112    	; 0x106 <__bad_interrupt>
  96:	00 00       	nop
  98:	36 c0       	rjmp	.+108    	; 0x106 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	34 c0       	rjmp	.+104    	; 0x106 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	32 c0       	rjmp	.+100    	; 0x106 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	30 c0       	rjmp	.+96     	; 0x106 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2e c0       	rjmp	.+92     	; 0x106 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2c c0       	rjmp	.+88     	; 0x106 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2a c0       	rjmp	.+84     	; 0x106 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	28 c0       	rjmp	.+80     	; 0x106 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	26 c0       	rjmp	.+76     	; 0x106 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	f4 c0       	rjmp	.+488    	; 0x2a6 <__vector_47>
  be:	00 00       	nop
  c0:	22 c0       	rjmp	.+68     	; 0x106 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	20 c0       	rjmp	.+64     	; 0x106 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1e c0       	rjmp	.+60     	; 0x106 <__bad_interrupt>
	...

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d1 e2       	ldi	r29, 0x21	; 33
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	14 e0       	ldi	r17, 0x04	; 4
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b2 e0       	ldi	r27, 0x02	; 2
  de:	ea ea       	ldi	r30, 0xAA	; 170
  e0:	f5 e0       	ldi	r31, 0x05	; 5
  e2:	00 e0       	ldi	r16, 0x00	; 0
  e4:	0b bf       	out	0x3b, r16	; 59
  e6:	02 c0       	rjmp	.+4      	; 0xec <__do_copy_data+0x14>
  e8:	07 90       	elpm	r0, Z+
  ea:	0d 92       	st	X+, r0
  ec:	aa 3f       	cpi	r26, 0xFA	; 250
  ee:	b1 07       	cpc	r27, r17
  f0:	d9 f7       	brne	.-10     	; 0xe8 <__do_copy_data+0x10>

000000f2 <__do_clear_bss>:
  f2:	24 e0       	ldi	r18, 0x04	; 4
  f4:	aa ef       	ldi	r26, 0xFA	; 250
  f6:	b4 e0       	ldi	r27, 0x04	; 4
  f8:	01 c0       	rjmp	.+2      	; 0xfc <.do_clear_bss_start>

000000fa <.do_clear_bss_loop>:
  fa:	1d 92       	st	X+, r1

000000fc <.do_clear_bss_start>:
  fc:	ae 3f       	cpi	r26, 0xFE	; 254
  fe:	b2 07       	cpc	r27, r18
 100:	e1 f7       	brne	.-8      	; 0xfa <.do_clear_bss_loop>
 102:	65 d1       	rcall	.+714    	; 0x3ce <main>
 104:	50 c2       	rjmp	.+1184   	; 0x5a6 <_exit>

00000106 <__bad_interrupt>:
 106:	7c cf       	rjmp	.-264    	; 0x0 <__vectors>

00000108 <fnd_write>:
 * arguments
 *  - fnd_num: FND number (2 ~ 0)
 * -------------------------------------------------------------------------- */
inline void fnd_clear(uint8_t fnd_num)
{
    fnd_write(fnd_num, 0);
 108:	9f b7       	in	r25, 0x3f	; 63
 10a:	f8 94       	cli
 10c:	84 bb       	out	0x14, r24	; 20
 10e:	68 b9       	out	0x08, r22	; 8
 110:	87 e0       	ldi	r24, 0x07	; 7
 112:	84 bb       	out	0x14, r24	; 20
 114:	99 23       	and	r25, r25
 116:	0c f4       	brge	.+2      	; 0x11a <fnd_write+0x12>
 118:	78 94       	sei
 11a:	08 95       	ret

0000011c <fnd_clear_all>:
/* ----------------------------------------------------------------------------
 * clear all FNDs 
 * -------------------------------------------------------------------------- */
void fnd_clear_all(void)
{
    fnd_write(0, 0);
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	f3 df       	rcall	.-26     	; 0x108 <fnd_write>
    fnd_write(1, 0);
 122:	60 e0       	ldi	r22, 0x00	; 0
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	f0 df       	rcall	.-32     	; 0x108 <fnd_write>
    fnd_write(2, 0);
 128:	60 e0       	ldi	r22, 0x00	; 0
 12a:	82 e0       	ldi	r24, 0x02	; 2
 12c:	ed cf       	rjmp	.-38     	; 0x108 <fnd_write>
 12e:	08 95       	ret

00000130 <fnd_write_number>:
{
    static uint8_t num_code[] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x27, 0x7f, 0x6f,
                                  0x77, 0x7c, 0x39, 0x5e, 0x79, 0x71};
    uint8_t value;
    
    value = num_code[num] | (dot_on<<7);
 130:	e6 2f       	mov	r30, r22
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	e7 51       	subi	r30, 0x17	; 23
 136:	fb 4f       	sbci	r31, 0xFB	; 251
 138:	60 81       	ld	r22, Z
 13a:	90 e8       	ldi	r25, 0x80	; 128
 13c:	49 9f       	mul	r20, r25
 13e:	a0 01       	movw	r20, r0
 140:	11 24       	eor	r1, r1
 142:	64 2b       	or	r22, r20
    fnd_write(fnd_num, value);    
 144:	e1 cf       	rjmp	.-62     	; 0x108 <fnd_write>
 146:	08 95       	ret

00000148 <fnd_write_numbers>:
 * display a decimal number on an FND 
 * arguments
 *  - num: decimal number to display on FND (0 ~ 999)
 * -------------------------------------------------------------------------- */
void fnd_write_numbers(uint16_t num)
{
 148:	ef 92       	push	r14
 14a:	ff 92       	push	r15
 14c:	0f 93       	push	r16
 14e:	1f 93       	push	r17
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	fc 01       	movw	r30, r24
    uint8_t num_100, num_10, num_1;
    
    num_100 = num / 100;
 156:	9c 01       	movw	r18, r24
 158:	36 95       	lsr	r19
 15a:	27 95       	ror	r18
 15c:	36 95       	lsr	r19
 15e:	27 95       	ror	r18
 160:	ab e7       	ldi	r26, 0x7B	; 123
 162:	b4 e1       	ldi	r27, 0x14	; 20
 164:	ef d1       	rcall	.+990    	; 0x544 <__umulhisi3>
 166:	ec 01       	movw	r28, r24
 168:	d6 95       	lsr	r29
 16a:	c7 95       	ror	r28
    num_10 = num / 10 % 10;
 16c:	9f 01       	movw	r18, r30
 16e:	ad ec       	ldi	r26, 0xCD	; 205
 170:	bc ec       	ldi	r27, 0xCC	; 204
 172:	e8 d1       	rcall	.+976    	; 0x544 <__umulhisi3>
 174:	ac 01       	movw	r20, r24
 176:	56 95       	lsr	r21
 178:	47 95       	ror	r20
 17a:	56 95       	lsr	r21
 17c:	47 95       	ror	r20
 17e:	56 95       	lsr	r21
 180:	47 95       	ror	r20
 182:	9a 01       	movw	r18, r20
 184:	df d1       	rcall	.+958    	; 0x544 <__umulhisi3>
 186:	96 95       	lsr	r25
 188:	87 95       	ror	r24
 18a:	96 95       	lsr	r25
 18c:	87 95       	ror	r24
 18e:	96 95       	lsr	r25
 190:	87 95       	ror	r24
 192:	9c 01       	movw	r18, r24
 194:	22 0f       	add	r18, r18
 196:	33 1f       	adc	r19, r19
 198:	88 0f       	add	r24, r24
 19a:	99 1f       	adc	r25, r25
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	82 0f       	add	r24, r18
 1a6:	93 1f       	adc	r25, r19
 1a8:	f4 2e       	mov	r15, r20
 1aa:	f8 1a       	sub	r15, r24
    num_1 = num % 10;
 1ac:	ca 01       	movw	r24, r20
 1ae:	88 0f       	add	r24, r24
 1b0:	99 1f       	adc	r25, r25
 1b2:	44 0f       	add	r20, r20
 1b4:	55 1f       	adc	r21, r21
 1b6:	44 0f       	add	r20, r20
 1b8:	55 1f       	adc	r21, r21
 1ba:	44 0f       	add	r20, r20
 1bc:	55 1f       	adc	r21, r21
 1be:	48 0f       	add	r20, r24
 1c0:	59 1f       	adc	r21, r25
 1c2:	8f 01       	movw	r16, r30
 1c4:	04 1b       	sub	r16, r20
 1c6:	15 0b       	sbc	r17, r21
    
    if(num < 10) {
 1c8:	ea 30       	cpi	r30, 0x0A	; 10
 1ca:	f1 05       	cpc	r31, r1
        fnd_write(2, 0);
 1cc:	58 f4       	brcc	.+22     	; 0x1e4 <fnd_write_numbers+0x9c>
 1ce:	60 e0       	ldi	r22, 0x00	; 0
 1d0:	82 e0       	ldi	r24, 0x02	; 2
        fnd_write(1, 0);
 1d2:	9a df       	rcall	.-204    	; 0x108 <fnd_write>
 1d4:	60 e0       	ldi	r22, 0x00	; 0
 1d6:	81 e0       	ldi	r24, 0x01	; 1
        fnd_write_number(0, num_1, 0);    
 1d8:	97 df       	rcall	.-210    	; 0x108 <fnd_write>
 1da:	40 e0       	ldi	r20, 0x00	; 0
 1dc:	60 2f       	mov	r22, r16
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	a7 df       	rcall	.-178    	; 0x130 <fnd_write_number>
    } else if (num < 100) {
 1e2:	1b c0       	rjmp	.+54     	; 0x21a <fnd_write_numbers+0xd2>
 1e4:	e4 36       	cpi	r30, 0x64	; 100
 1e6:	f1 05       	cpc	r31, r1
        fnd_write(2, 0);    
 1e8:	60 f4       	brcc	.+24     	; 0x202 <fnd_write_numbers+0xba>
 1ea:	60 e0       	ldi	r22, 0x00	; 0
 1ec:	82 e0       	ldi	r24, 0x02	; 2
        fnd_write_number(1, num_10, 0);
 1ee:	8c df       	rcall	.-232    	; 0x108 <fnd_write>
 1f0:	40 e0       	ldi	r20, 0x00	; 0
 1f2:	6f 2d       	mov	r22, r15
 1f4:	81 e0       	ldi	r24, 0x01	; 1
        fnd_write_number(0, num_1, 0);
 1f6:	9c df       	rcall	.-200    	; 0x130 <fnd_write_number>
 1f8:	40 e0       	ldi	r20, 0x00	; 0
 1fa:	60 2f       	mov	r22, r16
 1fc:	80 e0       	ldi	r24, 0x00	; 0
    } else {        
        fnd_write_number(0, num_1, 0);
 1fe:	98 df       	rcall	.-208    	; 0x130 <fnd_write_number>
 200:	0c c0       	rjmp	.+24     	; 0x21a <fnd_write_numbers+0xd2>
 202:	40 e0       	ldi	r20, 0x00	; 0
 204:	60 2f       	mov	r22, r16
        fnd_write_number(1, num_10, 0);
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	93 df       	rcall	.-218    	; 0x130 <fnd_write_number>
 20a:	40 e0       	ldi	r20, 0x00	; 0
 20c:	6f 2d       	mov	r22, r15
 20e:	81 e0       	ldi	r24, 0x01	; 1
        fnd_write_number(2, num_100, 0);                
 210:	8f df       	rcall	.-226    	; 0x130 <fnd_write_number>
 212:	40 e0       	ldi	r20, 0x00	; 0
 214:	6c 2f       	mov	r22, r28
 216:	82 e0       	ldi	r24, 0x02	; 2
 218:	8b df       	rcall	.-234    	; 0x130 <fnd_write_number>
    }    
}
 21a:	df 91       	pop	r29
 21c:	cf 91       	pop	r28
 21e:	1f 91       	pop	r17
 220:	0f 91       	pop	r16
 222:	ff 90       	pop	r15
 224:	ef 90       	pop	r14
 226:	08 95       	ret

00000228 <led_write>:
 * -------------------------------------------------------------------------- */
void led_write(uint8_t value)
{
    uint8_t sreg;
    
    sreg = SREG;            // save SREG
 228:	9f b7       	in	r25, 0x3f	; 63
    cli();                  // disable interrupt to prevent shared-data problem
 22a:	f8 94       	cli
 * arguments
 *  - fnd_num: FND number (2 ~ 0)
 * -------------------------------------------------------------------------- */
inline static void fnd_select(uint8_t fnd_num)
{
    PORTG = fnd_num;
 22c:	23 e0       	ldi	r18, 0x03	; 3
 22e:	24 bb       	out	0x14, r18	; 20
    
    sreg = SREG;            // save SREG
    cli();                  // disable interrupt to prevent shared-data problem

    fnd_select(3);
    PORTC = value;
 230:	88 b9       	out	0x08, r24	; 8
/* ----------------------------------------------------------------------------
 * deselect selected FND
 * -------------------------------------------------------------------------- */
inline static void fnd_deselect(void)
{
    PORTG = 0x07;
 232:	87 e0       	ldi	r24, 0x07	; 7
 234:	84 bb       	out	0x14, r24	; 20

    fnd_select(3);
    PORTC = value;
    fnd_deselect();

    if(sreg&0x80)           // if global interrupt was enabled before executing cli()
 236:	99 23       	and	r25, r25
 238:	0c f4       	brge	.+2      	; 0x23c <led_write+0x14>
        sei();              // enable interrupt        
 23a:	78 94       	sei
 23c:	08 95       	ret

0000023e <fnd_init>:
 * initialize port for FND/LED interface
 * -------------------------------------------------------------------------- */
inline static void fnd_port_init(void)
{
    // configure output
    DDRC = 0xff;            // PORTC[7..0]
 23e:	8f ef       	ldi	r24, 0xFF	; 255
 240:	87 b9       	out	0x07, r24	; 7
    DDRG = 0x07;            // PORTG[2..0]
 242:	87 e0       	ldi	r24, 0x07	; 7
 244:	83 bb       	out	0x13, r24	; 19
    DDRB |= _BV(LED_COLOR);
 246:	84 b1       	in	r24, 0x04	; 4
 248:	80 61       	ori	r24, 0x10	; 16
 24a:	84 b9       	out	0x04, r24	; 4
 * initialize FND/LED
 * -------------------------------------------------------------------------- */
void fnd_init(void)
{
    fnd_port_init();
    fnd_clear_all();
 24c:	67 df       	rcall	.-306    	; 0x11c <fnd_clear_all>
    led_write(0xff);
 24e:	8f ef       	ldi	r24, 0xFF	; 255
 250:	eb cf       	rjmp	.-42     	; 0x228 <led_write>
 252:	08 95       	ret

00000254 <__vector_4>:
// variable modified interrupt
volatile uint16_t fnd_num = 0;
volatile uint8_t mode = 0;
volatile uint8_t note_idx = 0; 

ISR(INT3_vect){
 254:	1f 92       	push	r1
 256:	0f 92       	push	r0
 258:	0f b6       	in	r0, 0x3f	; 63
 25a:	0f 92       	push	r0
 25c:	11 24       	eor	r1, r1
	note_idx = 0; // index 0
 25e:	10 92 fa 04 	sts	0x04FA, r1	; 0x8004fa <__data_end>
}
 262:	0f 90       	pop	r0
 264:	0f be       	out	0x3f, r0	; 63
 266:	0f 90       	pop	r0
 268:	1f 90       	pop	r1
 26a:	18 95       	reti

0000026c <__vector_8>:

ISR(INT7_vect){
 26c:	1f 92       	push	r1
 26e:	0f 92       	push	r0
 270:	0f b6       	in	r0, 0x3f	; 63
 272:	0f 92       	push	r0
 274:	11 24       	eor	r1, r1
 276:	8f 93       	push	r24
 278:	9f 93       	push	r25
	mode= !mode;
 27a:	90 91 fb 04 	lds	r25, 0x04FB	; 0x8004fb <mode>
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	91 11       	cpse	r25, r1
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <mode>
	if(mode == 0) {
 288:	80 91 fb 04 	lds	r24, 0x04FB	; 0x8004fb <mode>
 28c:	81 11       	cpse	r24, r1
 28e:	04 c0       	rjmp	.+8      	; 0x298 <__vector_8+0x2c>
		fnd_num = 0;
 290:	10 92 fd 04 	sts	0x04FD, r1	; 0x8004fd <fnd_num+0x1>
 294:	10 92 fc 04 	sts	0x04FC, r1	; 0x8004fc <fnd_num>
	}
}
 298:	9f 91       	pop	r25
 29a:	8f 91       	pop	r24
 29c:	0f 90       	pop	r0
 29e:	0f be       	out	0x3f, r0	; 63
 2a0:	0f 90       	pop	r0
 2a2:	1f 90       	pop	r1
 2a4:	18 95       	reti

000002a6 <__vector_47>:

ISR(TIMER5_COMPA_vect){
 2a6:	1f 92       	push	r1
 2a8:	0f 92       	push	r0
 2aa:	0f b6       	in	r0, 0x3f	; 63
 2ac:	0f 92       	push	r0
 2ae:	11 24       	eor	r1, r1
 2b0:	0b b6       	in	r0, 0x3b	; 59
 2b2:	0f 92       	push	r0
 2b4:	2f 93       	push	r18
 2b6:	3f 93       	push	r19
 2b8:	4f 93       	push	r20
 2ba:	5f 93       	push	r21
 2bc:	6f 93       	push	r22
 2be:	7f 93       	push	r23
 2c0:	8f 93       	push	r24
 2c2:	9f 93       	push	r25
 2c4:	af 93       	push	r26
 2c6:	bf 93       	push	r27
 2c8:	ef 93       	push	r30
 2ca:	ff 93       	push	r31
	fnd_write_numbers(fnd_num);
 2cc:	80 91 fc 04 	lds	r24, 0x04FC	; 0x8004fc <fnd_num>
 2d0:	90 91 fd 04 	lds	r25, 0x04FD	; 0x8004fd <fnd_num+0x1>
 2d4:	39 df       	rcall	.-398    	; 0x148 <fnd_write_numbers>
	fnd_num = (fnd_num + 1) % 1000;
 2d6:	40 91 fc 04 	lds	r20, 0x04FC	; 0x8004fc <fnd_num>
 2da:	50 91 fd 04 	lds	r21, 0x04FD	; 0x8004fd <fnd_num+0x1>
 2de:	4f 5f       	subi	r20, 0xFF	; 255
 2e0:	5f 4f       	sbci	r21, 0xFF	; 255
 2e2:	9a 01       	movw	r18, r20
 2e4:	36 95       	lsr	r19
 2e6:	27 95       	ror	r18
 2e8:	36 95       	lsr	r19
 2ea:	27 95       	ror	r18
 2ec:	36 95       	lsr	r19
 2ee:	27 95       	ror	r18
 2f0:	a5 ec       	ldi	r26, 0xC5	; 197
 2f2:	b0 e2       	ldi	r27, 0x20	; 32
 2f4:	27 d1       	rcall	.+590    	; 0x544 <__umulhisi3>
 2f6:	92 95       	swap	r25
 2f8:	82 95       	swap	r24
 2fa:	8f 70       	andi	r24, 0x0F	; 15
 2fc:	89 27       	eor	r24, r25
 2fe:	9f 70       	andi	r25, 0x0F	; 15
 300:	89 27       	eor	r24, r25
 302:	68 ee       	ldi	r22, 0xE8	; 232
 304:	73 e0       	ldi	r23, 0x03	; 3
 306:	86 9f       	mul	r24, r22
 308:	90 01       	movw	r18, r0
 30a:	87 9f       	mul	r24, r23
 30c:	30 0d       	add	r19, r0
 30e:	96 9f       	mul	r25, r22
 310:	30 0d       	add	r19, r0
 312:	11 24       	eor	r1, r1
 314:	ca 01       	movw	r24, r20
 316:	82 1b       	sub	r24, r18
 318:	93 0b       	sbc	r25, r19
 31a:	90 93 fd 04 	sts	0x04FD, r25	; 0x8004fd <fnd_num+0x1>
 31e:	80 93 fc 04 	sts	0x04FC, r24	; 0x8004fc <fnd_num>
}
 322:	ff 91       	pop	r31
 324:	ef 91       	pop	r30
 326:	bf 91       	pop	r27
 328:	af 91       	pop	r26
 32a:	9f 91       	pop	r25
 32c:	8f 91       	pop	r24
 32e:	7f 91       	pop	r23
 330:	6f 91       	pop	r22
 332:	5f 91       	pop	r21
 334:	4f 91       	pop	r20
 336:	3f 91       	pop	r19
 338:	2f 91       	pop	r18
 33a:	0f 90       	pop	r0
 33c:	0b be       	out	0x3b, r0	; 59
 33e:	0f 90       	pop	r0
 340:	0f be       	out	0x3f, r0	; 63
 342:	0f 90       	pop	r0
 344:	1f 90       	pop	r1
 346:	18 95       	reti

00000348 <my_delay_ms>:


void my_delay_ms(uint16_t ms){
	for(uint16_t i=0; i<ms; i++) {
 348:	20 e0       	ldi	r18, 0x00	; 0
 34a:	30 e0       	ldi	r19, 0x00	; 0
 34c:	08 c0       	rjmp	.+16     	; 0x35e <my_delay_ms+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 34e:	ef e9       	ldi	r30, 0x9F	; 159
 350:	ff e0       	ldi	r31, 0x0F	; 15
 352:	31 97       	sbiw	r30, 0x01	; 1
 354:	f1 f7       	brne	.-4      	; 0x352 <my_delay_ms+0xa>
 356:	00 c0       	rjmp	.+0      	; 0x358 <my_delay_ms+0x10>
 358:	00 00       	nop
 35a:	2f 5f       	subi	r18, 0xFF	; 255
 35c:	3f 4f       	sbci	r19, 0xFF	; 255
 35e:	28 17       	cp	r18, r24
 360:	39 07       	cpc	r19, r25
 362:	a8 f3       	brcs	.-22     	; 0x34e <my_delay_ms+0x6>
		_delay_ms(1);    
	}
}
 364:	08 95       	ret

00000366 <ioport_init>:

void ioport_init(void){
	DDRB = _BV(LED_COLOR);
 366:	80 e1       	ldi	r24, 0x10	; 16
 368:	84 b9       	out	0x04, r24	; 4
	DDRC = _BV(LED1) | _BV(LED2) | _BV(LED3) | _BV(LED4);
 36a:	8f e0       	ldi	r24, 0x0F	; 15
 36c:	87 b9       	out	0x07, r24	; 7
	DDRE = _BV(SOUND_OUT);
 36e:	88 e0       	ldi	r24, 0x08	; 8
 370:	8d b9       	out	0x0d, r24	; 13
	
	PORTE = _BV(SW2);
 372:	90 e8       	ldi	r25, 0x80	; 128
 374:	9e b9       	out	0x0e, r25	; 14
	PORTD = _BV(SW3);
 376:	8b b9       	out	0x0b, r24	; 11
 378:	08 95       	ret

0000037a <timer_init>:
}

void timer_init(void){
	TCCR3A |= _BV(COM3A0);
 37a:	e0 e9       	ldi	r30, 0x90	; 144
 37c:	f0 e0       	ldi	r31, 0x00	; 0
 37e:	80 81       	ld	r24, Z
 380:	80 64       	ori	r24, 0x40	; 64
 382:	80 83       	st	Z, r24
	TCCR3B |= _BV(WGM32); 
 384:	e1 e9       	ldi	r30, 0x91	; 145
 386:	f0 e0       	ldi	r31, 0x00	; 0
 388:	80 81       	ld	r24, Z
 38a:	88 60       	ori	r24, 0x08	; 8
 38c:	80 83       	st	Z, r24
	
	TCCR5B |= _BV(WGM52) | _BV(CS51) | _BV(CS50);  // prescaler 64
 38e:	e1 e2       	ldi	r30, 0x21	; 33
 390:	f1 e0       	ldi	r31, 0x01	; 1
 392:	80 81       	ld	r24, Z
 394:	8b 60       	ori	r24, 0x0B	; 11
 396:	80 83       	st	Z, r24
	TIMSK5 |= _BV(OCIE5A);
 398:	e3 e7       	ldi	r30, 0x73	; 115
 39a:	f0 e0       	ldi	r31, 0x00	; 0
 39c:	80 81       	ld	r24, Z
 39e:	82 60       	ori	r24, 0x02	; 2
 3a0:	80 83       	st	Z, r24
	OCR5A = F_CPU/(64*10)-1; // 16bit -> max: 65536 ~~> 24999
 3a2:	87 ea       	ldi	r24, 0xA7	; 167
 3a4:	91 e6       	ldi	r25, 0x61	; 97
 3a6:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x7e0129>
 3aa:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x7e0128>
 3ae:	08 95       	ret

000003b0 <interrupt_init>:
	
}

void interrupt_init(void){
	EICRA |= _BV(ISC31); // falling edge triggered
 3b0:	e9 e6       	ldi	r30, 0x69	; 105
 3b2:	f0 e0       	ldi	r31, 0x00	; 0
 3b4:	80 81       	ld	r24, Z
 3b6:	80 68       	ori	r24, 0x80	; 128
 3b8:	80 83       	st	Z, r24
	EICRB |= _BV(ISC71); // falling edge triggered
 3ba:	ea e6       	ldi	r30, 0x6A	; 106
 3bc:	f0 e0       	ldi	r31, 0x00	; 0
 3be:	80 81       	ld	r24, Z
 3c0:	80 68       	ori	r24, 0x80	; 128
 3c2:	80 83       	st	Z, r24
	EIMSK |= _BV(INT7) | _BV(INT3); // interrupt enable
 3c4:	8d b3       	in	r24, 0x1d	; 29
 3c6:	88 68       	ori	r24, 0x88	; 136
 3c8:	8d bb       	out	0x1d, r24	; 29
	sei();
 3ca:	78 94       	sei
 3cc:	08 95       	ret

000003ce <main>:



int main(void){
	
	ioport_init();
 3ce:	cb df       	rcall	.-106    	; 0x366 <ioport_init>
	fnd_init();
 3d0:	36 df       	rcall	.-404    	; 0x23e <fnd_init>
	interrupt_init();
 3d2:	ee df       	rcall	.-36     	; 0x3b0 <interrupt_init>
 3d4:	d2 df       	rcall	.-92     	; 0x37a <timer_init>
	timer_init();
 3d6:	80 91 fc 04 	lds	r24, 0x04FC	; 0x8004fc <fnd_num>
	
	fnd_write_numbers(fnd_num);
 3da:	90 91 fd 04 	lds	r25, 0x04FD	; 0x8004fd <fnd_num+0x1>
 3de:	b4 de       	rcall	.-664    	; 0x148 <fnd_write_numbers>
 3e0:	80 91 fb 04 	lds	r24, 0x04FB	; 0x8004fb <mode>
	
	uint16_t note_size = sizeof(m_notes)/sizeof(uint16_t);
	
	while(1){
		if(mode){
 3e4:	88 23       	and	r24, r24
 3e6:	09 f4       	brne	.+2      	; 0x3ea <main+0x1c>
 3e8:	66 c0       	rjmp	.+204    	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
 3ea:	e0 91 fa 04 	lds	r30, 0x04FA	; 0x8004fa <__data_end>
			if(m_notes[note_idx] == 0){
 3ee:	f0 e0       	ldi	r31, 0x00	; 0
 3f0:	ee 0f       	add	r30, r30
 3f2:	ff 1f       	adc	r31, r31
 3f4:	e8 50       	subi	r30, 0x08	; 8
 3f6:	fd 4f       	sbci	r31, 0xFD	; 253
 3f8:	80 81       	ld	r24, Z
 3fa:	91 81       	ldd	r25, Z+1	; 0x01
 3fc:	89 2b       	or	r24, r25
 3fe:	71 f4       	brne	.+28     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 400:	7a d0       	rcall	.+244    	; 0x4f6 <sound_mute>
				sound_mute();
 402:	e0 91 fa 04 	lds	r30, 0x04FA	; 0x8004fa <__data_end>
				my_delay_ms(m_duration[note_idx]*music_tempo);
 406:	f0 e0       	ldi	r31, 0x00	; 0
 408:	e0 50       	subi	r30, 0x00	; 0
 40a:	fe 4f       	sbci	r31, 0xFE	; 254
 40c:	80 81       	ld	r24, Z
 40e:	90 91 e8 04 	lds	r25, 0x04E8	; 0x8004e8 <music_tempo>
 412:	98 9f       	mul	r25, r24
 414:	c0 01       	movw	r24, r0
 416:	11 24       	eor	r1, r1
 418:	97 df       	rcall	.-210    	; 0x348 <my_delay_ms>
 41a:	e2 cf       	rjmp	.-60     	; 0x3e0 <main+0x12>
 41c:	40 91 fa 04 	lds	r20, 0x04FA	; 0x8004fa <__data_end>
			}
			else{
				sound_set_frequency(m_notes[note_idx%note_size]);
 420:	50 e0       	ldi	r21, 0x00	; 0
 422:	9a 01       	movw	r18, r20
 424:	36 95       	lsr	r19
 426:	27 95       	ror	r18
 428:	36 95       	lsr	r19
 42a:	27 95       	ror	r18
 42c:	36 95       	lsr	r19
 42e:	27 95       	ror	r18
 430:	a9 e0       	ldi	r26, 0x09	; 9
 432:	b1 e2       	ldi	r27, 0x21	; 33
 434:	87 d0       	rcall	.+270    	; 0x544 <__umulhisi3>
 436:	96 95       	lsr	r25
 438:	87 95       	ror	r24
 43a:	96 95       	lsr	r25
 43c:	87 95       	ror	r24
 43e:	c8 ef       	ldi	r28, 0xF8	; 248
 440:	c8 9f       	mul	r28, r24
 442:	90 01       	movw	r18, r0
 444:	c9 9f       	mul	r28, r25
 446:	30 0d       	add	r19, r0
 448:	11 24       	eor	r1, r1
 44a:	ca 01       	movw	r24, r20
 44c:	82 1b       	sub	r24, r18
 44e:	93 0b       	sbc	r25, r19
 450:	88 0f       	add	r24, r24
 452:	99 1f       	adc	r25, r25
 454:	fc 01       	movw	r30, r24
 456:	e8 50       	subi	r30, 0x08	; 8
 458:	fd 4f       	sbci	r31, 0xFD	; 253
 45a:	80 81       	ld	r24, Z
 45c:	91 81       	ldd	r25, Z+1	; 0x01
 45e:	2d d0       	rcall	.+90     	; 0x4ba <sound_set_frequency>
 460:	40 91 fa 04 	lds	r20, 0x04FA	; 0x8004fa <__data_end>
				my_delay_ms(m_duration[note_idx%note_size*music_tempo]);
 464:	50 e0       	ldi	r21, 0x00	; 0
 466:	9a 01       	movw	r18, r20
 468:	36 95       	lsr	r19
 46a:	27 95       	ror	r18
 46c:	36 95       	lsr	r19
 46e:	27 95       	ror	r18
 470:	36 95       	lsr	r19
 472:	27 95       	ror	r18
 474:	a9 e0       	ldi	r26, 0x09	; 9
 476:	b1 e2       	ldi	r27, 0x21	; 33
 478:	65 d0       	rcall	.+202    	; 0x544 <__umulhisi3>
 47a:	96 95       	lsr	r25
 47c:	87 95       	ror	r24
 47e:	96 95       	lsr	r25
 480:	87 95       	ror	r24
 482:	c8 9f       	mul	r28, r24
 484:	90 01       	movw	r18, r0
 486:	c9 9f       	mul	r28, r25
 488:	30 0d       	add	r19, r0
 48a:	11 24       	eor	r1, r1
 48c:	ca 01       	movw	r24, r20
 48e:	82 1b       	sub	r24, r18
 490:	93 0b       	sbc	r25, r19
 492:	20 91 e8 04 	lds	r18, 0x04E8	; 0x8004e8 <music_tempo>
 496:	28 9f       	mul	r18, r24
 498:	f0 01       	movw	r30, r0
 49a:	29 9f       	mul	r18, r25
 49c:	f0 0d       	add	r31, r0
 49e:	11 24       	eor	r1, r1
 4a0:	e0 50       	subi	r30, 0x00	; 0
 4a2:	fe 4f       	sbci	r31, 0xFE	; 254
 4a4:	80 81       	ld	r24, Z
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	4f df       	rcall	.-354    	; 0x348 <my_delay_ms>
 4aa:	80 91 fa 04 	lds	r24, 0x04FA	; 0x8004fa <__data_end>
				note_idx++;
 4ae:	8f 5f       	subi	r24, 0xFF	; 255
 4b0:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <__data_end>
 4b4:	95 cf       	rjmp	.-214    	; 0x3e0 <main+0x12>
 4b6:	1f d0       	rcall	.+62     	; 0x4f6 <sound_mute>
			}
		}
		else{
			sound_mute();
 4b8:	93 cf       	rjmp	.-218    	; 0x3e0 <main+0x12>

000004ba <sound_set_frequency>:
 * arguments
 *  - freq_hz: the frequency of output pulse
 *    (minimum available value of freq_hz: 16 Hz)
 * -------------------------------------------------------------------------- */
void sound_set_frequency(uint16_t freq_hz){
	OCR3A = F_CPU/(2*8*freq_hz)- 1; // compare match setting
 4ba:	82 95       	swap	r24
 4bc:	92 95       	swap	r25
 4be:	90 7f       	andi	r25, 0xF0	; 240
 4c0:	98 27       	eor	r25, r24
 4c2:	80 7f       	andi	r24, 0xF0	; 240
 4c4:	98 27       	eor	r25, r24
 4c6:	9c 01       	movw	r18, r24
 4c8:	40 e0       	ldi	r20, 0x00	; 0
 4ca:	50 e0       	ldi	r21, 0x00	; 0
 4cc:	60 e0       	ldi	r22, 0x00	; 0
 4ce:	74 e2       	ldi	r23, 0x24	; 36
 4d0:	84 ef       	ldi	r24, 0xF4	; 244
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	1b d0       	rcall	.+54     	; 0x50c <__divmodsi4>
 4d6:	21 50       	subi	r18, 0x01	; 1
 4d8:	31 09       	sbc	r19, r1
 4da:	30 93 99 00 	sts	0x0099, r19	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 4de:	20 93 98 00 	sts	0x0098, r18	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	TCNT3 = 0; // Timer3 counter reset (if not, sound breaks out temporaily)
 4e2:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
 4e6:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
	TCCR3B |= _BV(CS31); // Timer3 prescaler : 8
 4ea:	e1 e9       	ldi	r30, 0x91	; 145
 4ec:	f0 e0       	ldi	r31, 0x00	; 0
 4ee:	80 81       	ld	r24, Z
 4f0:	82 60       	ori	r24, 0x02	; 2
 4f2:	80 83       	st	Z, r24
 4f4:	08 95       	ret

000004f6 <sound_mute>:

/* ----------------------------------------------------------------------------
 * mute output
 * -------------------------------------------------------------------------- */
void sound_mute(void){
    TCCR3B &= ~(_BV(CS32)|_BV(CS31)|_BV(CS30)); // no clock source: stop 
 4f6:	e1 e9       	ldi	r30, 0x91	; 145
 4f8:	f0 e0       	ldi	r31, 0x00	; 0
 4fa:	80 81       	ld	r24, Z
 4fc:	88 7f       	andi	r24, 0xF8	; 248
 4fe:	80 83       	st	Z, r24
    
    if(PINE &_BV(SOUND_OUT))        // if OC3A is 'H', toggle it                     
 500:	63 9b       	sbis	0x0c, 3	; 12
 502:	03 c0       	rjmp	.+6      	; 0x50a <sound_mute+0x14>
        TCCR3C = _BV(FOC3A);    
 504:	80 e8       	ldi	r24, 0x80	; 128
 506:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <__TEXT_REGION_LENGTH__+0x7e0092>
 50a:	08 95       	ret

0000050c <__divmodsi4>:
 50c:	05 2e       	mov	r0, r21
 50e:	97 fb       	bst	r25, 7
 510:	16 f4       	brtc	.+4      	; 0x516 <__divmodsi4+0xa>
 512:	00 94       	com	r0
 514:	0f d0       	rcall	.+30     	; 0x534 <__negsi2>
 516:	57 fd       	sbrc	r21, 7
 518:	05 d0       	rcall	.+10     	; 0x524 <__divmodsi4_neg2>
 51a:	23 d0       	rcall	.+70     	; 0x562 <__udivmodsi4>
 51c:	07 fc       	sbrc	r0, 7
 51e:	02 d0       	rcall	.+4      	; 0x524 <__divmodsi4_neg2>
 520:	46 f4       	brtc	.+16     	; 0x532 <__divmodsi4_exit>
 522:	08 c0       	rjmp	.+16     	; 0x534 <__negsi2>

00000524 <__divmodsi4_neg2>:
 524:	50 95       	com	r21
 526:	40 95       	com	r20
 528:	30 95       	com	r19
 52a:	21 95       	neg	r18
 52c:	3f 4f       	sbci	r19, 0xFF	; 255
 52e:	4f 4f       	sbci	r20, 0xFF	; 255
 530:	5f 4f       	sbci	r21, 0xFF	; 255

00000532 <__divmodsi4_exit>:
 532:	08 95       	ret

00000534 <__negsi2>:
 534:	90 95       	com	r25
 536:	80 95       	com	r24
 538:	70 95       	com	r23
 53a:	61 95       	neg	r22
 53c:	7f 4f       	sbci	r23, 0xFF	; 255
 53e:	8f 4f       	sbci	r24, 0xFF	; 255
 540:	9f 4f       	sbci	r25, 0xFF	; 255
 542:	08 95       	ret

00000544 <__umulhisi3>:
 544:	a2 9f       	mul	r26, r18
 546:	b0 01       	movw	r22, r0
 548:	b3 9f       	mul	r27, r19
 54a:	c0 01       	movw	r24, r0
 54c:	a3 9f       	mul	r26, r19
 54e:	70 0d       	add	r23, r0
 550:	81 1d       	adc	r24, r1
 552:	11 24       	eor	r1, r1
 554:	91 1d       	adc	r25, r1
 556:	b2 9f       	mul	r27, r18
 558:	70 0d       	add	r23, r0
 55a:	81 1d       	adc	r24, r1
 55c:	11 24       	eor	r1, r1
 55e:	91 1d       	adc	r25, r1
 560:	08 95       	ret

00000562 <__udivmodsi4>:
 562:	a1 e2       	ldi	r26, 0x21	; 33
 564:	1a 2e       	mov	r1, r26
 566:	aa 1b       	sub	r26, r26
 568:	bb 1b       	sub	r27, r27
 56a:	fd 01       	movw	r30, r26
 56c:	0d c0       	rjmp	.+26     	; 0x588 <__udivmodsi4_ep>

0000056e <__udivmodsi4_loop>:
 56e:	aa 1f       	adc	r26, r26
 570:	bb 1f       	adc	r27, r27
 572:	ee 1f       	adc	r30, r30
 574:	ff 1f       	adc	r31, r31
 576:	a2 17       	cp	r26, r18
 578:	b3 07       	cpc	r27, r19
 57a:	e4 07       	cpc	r30, r20
 57c:	f5 07       	cpc	r31, r21
 57e:	20 f0       	brcs	.+8      	; 0x588 <__udivmodsi4_ep>
 580:	a2 1b       	sub	r26, r18
 582:	b3 0b       	sbc	r27, r19
 584:	e4 0b       	sbc	r30, r20
 586:	f5 0b       	sbc	r31, r21

00000588 <__udivmodsi4_ep>:
 588:	66 1f       	adc	r22, r22
 58a:	77 1f       	adc	r23, r23
 58c:	88 1f       	adc	r24, r24
 58e:	99 1f       	adc	r25, r25
 590:	1a 94       	dec	r1
 592:	69 f7       	brne	.-38     	; 0x56e <__udivmodsi4_loop>
 594:	60 95       	com	r22
 596:	70 95       	com	r23
 598:	80 95       	com	r24
 59a:	90 95       	com	r25
 59c:	9b 01       	movw	r18, r22
 59e:	ac 01       	movw	r20, r24
 5a0:	bd 01       	movw	r22, r26
 5a2:	cf 01       	movw	r24, r30
 5a4:	08 95       	ret

000005a6 <_exit>:
 5a6:	f8 94       	cli

000005a8 <__stop_program>:
 5a8:	ff cf       	rjmp	.-2      	; 0x5a8 <__stop_program>
