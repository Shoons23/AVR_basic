
AsynchronousCommunication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800200  0000064e  000006e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000064e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800216  00800216  000006f8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006f8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000728  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000768  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001111  00000000  00000000  00000820  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ce7  00000000  00000000  00001931  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000621  00000000  00000000  00002618  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000198  00000000  00000000  00002c3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005fd  00000000  00000000  00002dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000046c  00000000  00000000  000033d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  0000383d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	65 c0       	rjmp	.+202    	; 0xcc <__ctors_end>
   2:	00 00       	nop
   4:	80 c0       	rjmp	.+256    	; 0x106 <__bad_interrupt>
   6:	00 00       	nop
   8:	7e c0       	rjmp	.+252    	; 0x106 <__bad_interrupt>
   a:	00 00       	nop
   c:	7c c0       	rjmp	.+248    	; 0x106 <__bad_interrupt>
   e:	00 00       	nop
  10:	7a c0       	rjmp	.+244    	; 0x106 <__bad_interrupt>
  12:	00 00       	nop
  14:	78 c0       	rjmp	.+240    	; 0x106 <__bad_interrupt>
  16:	00 00       	nop
  18:	76 c0       	rjmp	.+236    	; 0x106 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	74 c0       	rjmp	.+232    	; 0x106 <__bad_interrupt>
  1e:	00 00       	nop
  20:	72 c0       	rjmp	.+228    	; 0x106 <__bad_interrupt>
  22:	00 00       	nop
  24:	70 c0       	rjmp	.+224    	; 0x106 <__bad_interrupt>
  26:	00 00       	nop
  28:	6e c0       	rjmp	.+220    	; 0x106 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6c c0       	rjmp	.+216    	; 0x106 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6a c0       	rjmp	.+212    	; 0x106 <__bad_interrupt>
  32:	00 00       	nop
  34:	68 c0       	rjmp	.+208    	; 0x106 <__bad_interrupt>
  36:	00 00       	nop
  38:	66 c0       	rjmp	.+204    	; 0x106 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	64 c0       	rjmp	.+200    	; 0x106 <__bad_interrupt>
  3e:	00 00       	nop
  40:	62 c0       	rjmp	.+196    	; 0x106 <__bad_interrupt>
  42:	00 00       	nop
  44:	60 c0       	rjmp	.+192    	; 0x106 <__bad_interrupt>
  46:	00 00       	nop
  48:	5e c0       	rjmp	.+188    	; 0x106 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5c c0       	rjmp	.+184    	; 0x106 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5a c0       	rjmp	.+180    	; 0x106 <__bad_interrupt>
  52:	00 00       	nop
  54:	58 c0       	rjmp	.+176    	; 0x106 <__bad_interrupt>
  56:	00 00       	nop
  58:	56 c0       	rjmp	.+172    	; 0x106 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	54 c0       	rjmp	.+168    	; 0x106 <__bad_interrupt>
  5e:	00 00       	nop
  60:	52 c0       	rjmp	.+164    	; 0x106 <__bad_interrupt>
  62:	00 00       	nop
  64:	fd c0       	rjmp	.+506    	; 0x260 <__vector_25>
  66:	00 00       	nop
  68:	4e c0       	rjmp	.+156    	; 0x106 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4c c0       	rjmp	.+152    	; 0x106 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4a c0       	rjmp	.+148    	; 0x106 <__bad_interrupt>
  72:	00 00       	nop
  74:	48 c0       	rjmp	.+144    	; 0x106 <__bad_interrupt>
  76:	00 00       	nop
  78:	46 c0       	rjmp	.+140    	; 0x106 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	44 c0       	rjmp	.+136    	; 0x106 <__bad_interrupt>
  7e:	00 00       	nop
  80:	42 c0       	rjmp	.+132    	; 0x106 <__bad_interrupt>
  82:	00 00       	nop
  84:	40 c0       	rjmp	.+128    	; 0x106 <__bad_interrupt>
  86:	00 00       	nop
  88:	3e c0       	rjmp	.+124    	; 0x106 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3c c0       	rjmp	.+120    	; 0x106 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3a c0       	rjmp	.+116    	; 0x106 <__bad_interrupt>
  92:	00 00       	nop
  94:	38 c0       	rjmp	.+112    	; 0x106 <__bad_interrupt>
  96:	00 00       	nop
  98:	36 c0       	rjmp	.+108    	; 0x106 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	34 c0       	rjmp	.+104    	; 0x106 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	32 c0       	rjmp	.+100    	; 0x106 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	30 c0       	rjmp	.+96     	; 0x106 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2e c0       	rjmp	.+92     	; 0x106 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2c c0       	rjmp	.+88     	; 0x106 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2a c0       	rjmp	.+84     	; 0x106 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	28 c0       	rjmp	.+80     	; 0x106 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	26 c0       	rjmp	.+76     	; 0x106 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	24 c0       	rjmp	.+72     	; 0x106 <__bad_interrupt>
  be:	00 00       	nop
  c0:	22 c0       	rjmp	.+68     	; 0x106 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	20 c0       	rjmp	.+64     	; 0x106 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1e c0       	rjmp	.+60     	; 0x106 <__bad_interrupt>
	...

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d1 e2       	ldi	r29, 0x21	; 33
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	12 e0       	ldi	r17, 0x02	; 2
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b2 e0       	ldi	r27, 0x02	; 2
  de:	ee e4       	ldi	r30, 0x4E	; 78
  e0:	f6 e0       	ldi	r31, 0x06	; 6
  e2:	00 e0       	ldi	r16, 0x00	; 0
  e4:	0b bf       	out	0x3b, r16	; 59
  e6:	02 c0       	rjmp	.+4      	; 0xec <__do_copy_data+0x14>
  e8:	07 90       	elpm	r0, Z+
  ea:	0d 92       	st	X+, r0
  ec:	a6 31       	cpi	r26, 0x16	; 22
  ee:	b1 07       	cpc	r27, r17
  f0:	d9 f7       	brne	.-10     	; 0xe8 <__do_copy_data+0x10>

000000f2 <__do_clear_bss>:
  f2:	22 e0       	ldi	r18, 0x02	; 2
  f4:	a6 e1       	ldi	r26, 0x16	; 22
  f6:	b2 e0       	ldi	r27, 0x02	; 2
  f8:	01 c0       	rjmp	.+2      	; 0xfc <.do_clear_bss_start>

000000fa <.do_clear_bss_loop>:
  fa:	1d 92       	st	X+, r1

000000fc <.do_clear_bss_start>:
  fc:	a0 32       	cpi	r26, 0x20	; 32
  fe:	b2 07       	cpc	r27, r18
 100:	e1 f7       	brne	.-8      	; 0xfa <.do_clear_bss_loop>
 102:	db d0       	rcall	.+438    	; 0x2ba <main>
 104:	a2 c2       	rjmp	.+1348   	; 0x64a <_exit>

00000106 <__bad_interrupt>:
 106:	7c cf       	rjmp	.-264    	; 0x0 <__vectors>

00000108 <fnd_write>:
 * arguments
 *  - fnd_num: FND number (2 ~ 0)
 * -------------------------------------------------------------------------- */
inline void fnd_clear(uint8_t fnd_num)
{
    fnd_write(fnd_num, 0);
 108:	9f b7       	in	r25, 0x3f	; 63
 10a:	f8 94       	cli
 10c:	84 bb       	out	0x14, r24	; 20
 10e:	68 b9       	out	0x08, r22	; 8
 110:	87 e0       	ldi	r24, 0x07	; 7
 112:	84 bb       	out	0x14, r24	; 20
 114:	99 23       	and	r25, r25
 116:	0c f4       	brge	.+2      	; 0x11a <fnd_write+0x12>
 118:	78 94       	sei
 11a:	08 95       	ret

0000011c <fnd_clear_all>:
/* ----------------------------------------------------------------------------
 * clear all FNDs 
 * -------------------------------------------------------------------------- */
void fnd_clear_all(void)
{
    fnd_write(0, 0);
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	f3 df       	rcall	.-26     	; 0x108 <fnd_write>
    fnd_write(1, 0);
 122:	60 e0       	ldi	r22, 0x00	; 0
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	f0 df       	rcall	.-32     	; 0x108 <fnd_write>
	fnd_write(2, 0);
 128:	60 e0       	ldi	r22, 0x00	; 0
 12a:	82 e0       	ldi	r24, 0x02	; 2
 12c:	ed cf       	rjmp	.-38     	; 0x108 <fnd_write>
 12e:	08 95       	ret

00000130 <fnd_write_number>:
{
    static uint8_t num_code[] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x27, 0x7f, 0x6f,
                                  0x77, 0x7c, 0x39, 0x5e, 0x79, 0x71};
    uint8_t value;
    
    value = num_code[num] | (dot_on<<7);
 130:	e6 2f       	mov	r30, r22
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	ea 5f       	subi	r30, 0xFA	; 250
 136:	fd 4f       	sbci	r31, 0xFD	; 253
 138:	60 81       	ld	r22, Z
 13a:	90 e8       	ldi	r25, 0x80	; 128
 13c:	49 9f       	mul	r20, r25
 13e:	a0 01       	movw	r20, r0
 140:	11 24       	eor	r1, r1
 142:	64 2b       	or	r22, r20
    fnd_write(fnd_num, value);    
 144:	e1 cf       	rjmp	.-62     	; 0x108 <fnd_write>
 146:	08 95       	ret

00000148 <fnd_write_numbers>:
}

void fnd_write_numbers(uint16_t num){
 148:	ef 92       	push	r14
 14a:	ff 92       	push	r15
 14c:	0f 93       	push	r16
 14e:	1f 93       	push	r17
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	8c 01       	movw	r16, r24
    uint8_t dot_off = 0x00;
    uint8_t value_u4 = num  % 10;
 156:	9c 01       	movw	r18, r24
 158:	ad ec       	ldi	r26, 0xCD	; 205
 15a:	bc ec       	ldi	r27, 0xCC	; 204
 15c:	db d0       	rcall	.+438    	; 0x314 <__umulhisi3>
 15e:	fc 01       	movw	r30, r24
 160:	f6 95       	lsr	r31
 162:	e7 95       	ror	r30
 164:	f6 95       	lsr	r31
 166:	e7 95       	ror	r30
 168:	f6 95       	lsr	r31
 16a:	e7 95       	ror	r30
 16c:	cf 01       	movw	r24, r30
 16e:	88 0f       	add	r24, r24
 170:	99 1f       	adc	r25, r25
 172:	ee 0f       	add	r30, r30
 174:	ff 1f       	adc	r31, r31
 176:	ee 0f       	add	r30, r30
 178:	ff 1f       	adc	r31, r31
 17a:	ee 0f       	add	r30, r30
 17c:	ff 1f       	adc	r31, r31
 17e:	e8 0f       	add	r30, r24
 180:	f9 1f       	adc	r31, r25
 182:	c8 01       	movw	r24, r16
 184:	8e 1b       	sub	r24, r30
 186:	9f 0b       	sbc	r25, r31
 188:	fc 01       	movw	r30, r24
	uint8_t value_u6 = (num / 10) % 10;
 18a:	c4 d0       	rcall	.+392    	; 0x314 <__umulhisi3>
 18c:	ac 01       	movw	r20, r24
 18e:	56 95       	lsr	r21
 190:	47 95       	ror	r20
 192:	56 95       	lsr	r21
 194:	47 95       	ror	r20
 196:	56 95       	lsr	r21
 198:	47 95       	ror	r20
 19a:	9a 01       	movw	r18, r20
 19c:	bb d0       	rcall	.+374    	; 0x314 <__umulhisi3>
 19e:	96 95       	lsr	r25
 1a0:	87 95       	ror	r24
 1a2:	96 95       	lsr	r25
 1a4:	87 95       	ror	r24
 1a6:	96 95       	lsr	r25
 1a8:	87 95       	ror	r24
 1aa:	9c 01       	movw	r18, r24
 1ac:	22 0f       	add	r18, r18
 1ae:	33 1f       	adc	r19, r19
 1b0:	88 0f       	add	r24, r24
 1b2:	99 1f       	adc	r25, r25
 1b4:	88 0f       	add	r24, r24
 1b6:	99 1f       	adc	r25, r25
 1b8:	88 0f       	add	r24, r24
 1ba:	99 1f       	adc	r25, r25
 1bc:	82 0f       	add	r24, r18
 1be:	93 1f       	adc	r25, r19
 1c0:	c4 2f       	mov	r28, r20
 1c2:	c8 1b       	sub	r28, r24
 1c4:	98 01       	movw	r18, r16
	uint8_t value_u8 = num / 100;
 1c6:	36 95       	lsr	r19
 1c8:	27 95       	ror	r18
 1ca:	36 95       	lsr	r19
 1cc:	27 95       	ror	r18
 1ce:	ab e7       	ldi	r26, 0x7B	; 123
 1d0:	b4 e1       	ldi	r27, 0x14	; 20
 1d2:	a0 d0       	rcall	.+320    	; 0x314 <__umulhisi3>
 1d4:	7c 01       	movw	r14, r24
 1d6:	f6 94       	lsr	r15
 1d8:	e7 94       	ror	r14
 1da:	0a 30       	cpi	r16, 0x0A	; 10
	
	if(num < 10){
 1dc:	11 05       	cpc	r17, r1
 1de:	58 f4       	brcc	.+22     	; 0x1f6 <fnd_write_numbers+0xae>
		fnd_write_number(0, value_u4, dot_off);
 1e0:	40 e0       	ldi	r20, 0x00	; 0
 1e2:	6e 2f       	mov	r22, r30
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	a4 df       	rcall	.-184    	; 0x130 <fnd_write_number>
		fnd_write(1, 0);
 1e8:	60 e0       	ldi	r22, 0x00	; 0
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	8d df       	rcall	.-230    	; 0x108 <fnd_write>
		fnd_write(2, 0);
 1ee:	60 e0       	ldi	r22, 0x00	; 0
 1f0:	82 e0       	ldi	r24, 0x02	; 2
 1f2:	8a df       	rcall	.-236    	; 0x108 <fnd_write>
 1f4:	18 c0       	rjmp	.+48     	; 0x226 <fnd_write_numbers+0xde>
	}
	else if(num < 100) {
 1f6:	04 36       	cpi	r16, 0x64	; 100
 1f8:	11 05       	cpc	r17, r1
 1fa:	48 f4       	brcc	.+18     	; 0x20e <fnd_write_numbers+0xc6>
		fnd_write_number(0, value_u4, dot_off);
 1fc:	40 e0       	ldi	r20, 0x00	; 0
 1fe:	6e 2f       	mov	r22, r30
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	96 df       	rcall	.-212    	; 0x130 <fnd_write_number>
		fnd_write_number(1, value_u6, dot_off);
 204:	40 e0       	ldi	r20, 0x00	; 0
 206:	6c 2f       	mov	r22, r28
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	92 df       	rcall	.-220    	; 0x130 <fnd_write_number>
		}
	else {
	    fnd_write_number(0, value_u4, dot_off);
 20c:	0c c0       	rjmp	.+24     	; 0x226 <fnd_write_numbers+0xde>
 20e:	40 e0       	ldi	r20, 0x00	; 0
 210:	6e 2f       	mov	r22, r30
 212:	80 e0       	ldi	r24, 0x00	; 0
	    fnd_write_number(1, value_u6, dot_off);
 214:	8d df       	rcall	.-230    	; 0x130 <fnd_write_number>
 216:	40 e0       	ldi	r20, 0x00	; 0
 218:	6c 2f       	mov	r22, r28
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	89 df       	rcall	.-238    	; 0x130 <fnd_write_number>
	    fnd_write_number(2, value_u8, dot_off);
 21e:	40 e0       	ldi	r20, 0x00	; 0
 220:	6e 2d       	mov	r22, r14
 222:	82 e0       	ldi	r24, 0x02	; 2
 224:	85 df       	rcall	.-246    	; 0x130 <fnd_write_number>
 226:	df 91       	pop	r29
	}
}
 228:	cf 91       	pop	r28
 22a:	1f 91       	pop	r17
 22c:	0f 91       	pop	r16
 22e:	ff 90       	pop	r15
 230:	ef 90       	pop	r14
 232:	08 95       	ret

00000234 <led_write>:
 234:	9f b7       	in	r25, 0x3f	; 63
void led_write(uint8_t value)
{
    uint8_t sreg;
    
    sreg = SREG;            // save SREG
    cli();                  // disable interrupt to prevent shared-data problem
 236:	f8 94       	cli
 * arguments
 *  - fnd_num: FND number (2 ~ 0)
 * -------------------------------------------------------------------------- */
inline static void fnd_select(uint8_t fnd_num)
{
    PORTG = fnd_num;
 238:	23 e0       	ldi	r18, 0x03	; 3
 23a:	24 bb       	out	0x14, r18	; 20
    
    sreg = SREG;            // save SREG
    cli();                  // disable interrupt to prevent shared-data problem

    fnd_select(3);
    PORTC = value;
 23c:	88 b9       	out	0x08, r24	; 8
/* ----------------------------------------------------------------------------
 * deselect selected FND
 * -------------------------------------------------------------------------- */
inline static void fnd_deselect(void)
{
    PORTG = 0x07;
 23e:	87 e0       	ldi	r24, 0x07	; 7
 240:	84 bb       	out	0x14, r24	; 20

    fnd_select(3);
    PORTC = value;
    fnd_deselect();

    if(sreg&0x80)           // if global interrupt was enabled before executing cli()
 242:	99 23       	and	r25, r25
 244:	0c f4       	brge	.+2      	; 0x248 <led_write+0x14>
        sei();              // enable interrupt        
 246:	78 94       	sei
 248:	08 95       	ret

0000024a <fnd_init>:
 * initialize port for FND/LED interface
 * -------------------------------------------------------------------------- */
inline static void fnd_port_init(void)
{
    // configure output
    DDRC = 0xff;            // PORTC[7..0]
 24a:	8f ef       	ldi	r24, 0xFF	; 255
 24c:	87 b9       	out	0x07, r24	; 7
    DDRG = 0x07;            // PORTG[2..0]
 24e:	87 e0       	ldi	r24, 0x07	; 7
 250:	83 bb       	out	0x13, r24	; 19
    DDRB |= _BV(LED_COLOR);
 252:	84 b1       	in	r24, 0x04	; 4
 254:	80 61       	ori	r24, 0x10	; 16
 256:	84 b9       	out	0x04, r24	; 4
 * initialize FND/LED
 * -------------------------------------------------------------------------- */
void fnd_init(void)
{
    fnd_port_init();
    fnd_clear_all();
 258:	61 df       	rcall	.-318    	; 0x11c <fnd_clear_all>
    led_write(0xff);
 25a:	8f ef       	ldi	r24, 0xFF	; 255
 25c:	eb cf       	rjmp	.-42     	; 0x234 <led_write>
 25e:	08 95       	ret

00000260 <__vector_25>:
#include "fnd.h"

#define CR 13
#define LF 10

ISR(USART0_RX_vect){
 260:	1f 92       	push	r1
 262:	0f 92       	push	r0
 264:	0f b6       	in	r0, 0x3f	; 63
 266:	0f 92       	push	r0
 268:	11 24       	eor	r1, r1
 26a:	0b b6       	in	r0, 0x3b	; 59
 26c:	0f 92       	push	r0
 26e:	2f 93       	push	r18
 270:	3f 93       	push	r19
 272:	4f 93       	push	r20
 274:	5f 93       	push	r21
 276:	6f 93       	push	r22
 278:	7f 93       	push	r23
 27a:	8f 93       	push	r24
 27c:	9f 93       	push	r25
 27e:	af 93       	push	r26
 280:	bf 93       	push	r27
 282:	ef 93       	push	r30
 284:	ff 93       	push	r31
	UDR0 = UDR0;
 286:	e6 ec       	ldi	r30, 0xC6	; 198
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	80 81       	ld	r24, Z
 28c:	80 83       	st	Z, r24
	fnd_write_numbers(999);
 28e:	87 ee       	ldi	r24, 0xE7	; 231
 290:	93 e0       	ldi	r25, 0x03	; 3
 292:	5a df       	rcall	.-332    	; 0x148 <fnd_write_numbers>
}
 294:	ff 91       	pop	r31
 296:	ef 91       	pop	r30
 298:	bf 91       	pop	r27
 29a:	af 91       	pop	r26
 29c:	9f 91       	pop	r25
 29e:	8f 91       	pop	r24
 2a0:	7f 91       	pop	r23
 2a2:	6f 91       	pop	r22
 2a4:	5f 91       	pop	r21
 2a6:	4f 91       	pop	r20
 2a8:	3f 91       	pop	r19
 2aa:	2f 91       	pop	r18
 2ac:	0f 90       	pop	r0
 2ae:	0b be       	out	0x3b, r0	; 59
 2b0:	0f 90       	pop	r0
 2b2:	0f be       	out	0x3f, r0	; 63
 2b4:	0f 90       	pop	r0
 2b6:	1f 90       	pop	r1
 2b8:	18 95       	reti

000002ba <main>:

int main(void)
{
	uint8_t ch;
	
	fnd_init();
 2ba:	c7 df       	rcall	.-114    	; 0x24a <fnd_init>
	uart_init();
 2bc:	0d d0       	rcall	.+26     	; 0x2d8 <uart_init>
 2be:	78 94       	sei
	sei();
 2c0:	6c e7       	ldi	r22, 0x7C	; 124
	
	fdevopen(uart_putch, uart_getch);
 2c2:	71 e0       	ldi	r23, 0x01	; 1
 2c4:	83 e8       	ldi	r24, 0x83	; 131
 2c6:	91 e0       	ldi	r25, 0x01	; 1
 2c8:	34 d0       	rcall	.+104    	; 0x332 <fdevopen>
 2ca:	8d e0       	ldi	r24, 0x0D	; 13
    
	UDR0 = 13;
 2cc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 2d0:	8d e0       	ldi	r24, 0x0D	; 13
	
	while (1) 
    {	
		UCSR0B = 13;
 2d2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 2d6:	fc cf       	rjmp	.-8      	; 0x2d0 <main+0x16>

000002d8 <uart_init>:
 2d8:	80 e1       	ldi	r24, 0x10	; 16
#include "board.h"

void uart_init(void){
	#define BAUDRATE 115200L
	
	UBRR0 = F_CPU/(8*BAUDRATE) -1; // error : 2.1%
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 2e0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0A = _BV(U2X0); // Double Speed Mode
 2e4:	82 e0       	ldi	r24, 0x02	; 2
 2e6:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	UCSR0B = _BV(RXEN0) | _BV(TXEN0);//  Rx, Tx enable
 2ea:	88 e1       	ldi	r24, 0x18	; 24
 2ec:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); // 8bit character size
 2f0:	86 e0       	ldi	r24, 0x06	; 6
 2f2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 2f6:	08 95       	ret

000002f8 <uart_getch>:
	
}
int8_t uart_getch(void)
{
	while(!(UCSR0A & _BV(RXC0))); // if UDR0 is fulled, clear
 2f8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 2fc:	88 23       	and	r24, r24
 2fe:	e4 f7       	brge	.-8      	; 0x2f8 <uart_getch>
	return UDR0;
 300:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
 304:	08 95       	ret

00000306 <uart_putch>:
void uart_putch(int8_t ch){
	while(!(UCSR0A & _BV(UDRE0))); // UDRE0 
 306:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 30a:	95 ff       	sbrs	r25, 5
 30c:	fc cf       	rjmp	.-8      	; 0x306 <uart_putch>
	UDR0 = ch;
 30e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 312:	08 95       	ret

00000314 <__umulhisi3>:
 314:	a2 9f       	mul	r26, r18
 316:	b0 01       	movw	r22, r0
 318:	b3 9f       	mul	r27, r19
 31a:	c0 01       	movw	r24, r0
 31c:	a3 9f       	mul	r26, r19
 31e:	70 0d       	add	r23, r0
 320:	81 1d       	adc	r24, r1
 322:	11 24       	eor	r1, r1
 324:	91 1d       	adc	r25, r1
 326:	b2 9f       	mul	r27, r18
 328:	70 0d       	add	r23, r0
 32a:	81 1d       	adc	r24, r1
 32c:	11 24       	eor	r1, r1
 32e:	91 1d       	adc	r25, r1
 330:	08 95       	ret

00000332 <fdevopen>:
 332:	0f 93       	push	r16
 334:	1f 93       	push	r17
 336:	cf 93       	push	r28
 338:	df 93       	push	r29
 33a:	00 97       	sbiw	r24, 0x00	; 0
 33c:	31 f4       	brne	.+12     	; 0x34a <fdevopen+0x18>
 33e:	61 15       	cp	r22, r1
 340:	71 05       	cpc	r23, r1
 342:	19 f4       	brne	.+6      	; 0x34a <fdevopen+0x18>
 344:	80 e0       	ldi	r24, 0x00	; 0
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	39 c0       	rjmp	.+114    	; 0x3bc <fdevopen+0x8a>
 34a:	8b 01       	movw	r16, r22
 34c:	ec 01       	movw	r28, r24
 34e:	6e e0       	ldi	r22, 0x0E	; 14
 350:	70 e0       	ldi	r23, 0x00	; 0
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	37 d0       	rcall	.+110    	; 0x3c6 <calloc>
 358:	fc 01       	movw	r30, r24
 35a:	89 2b       	or	r24, r25
 35c:	99 f3       	breq	.-26     	; 0x344 <fdevopen+0x12>
 35e:	80 e8       	ldi	r24, 0x80	; 128
 360:	83 83       	std	Z+3, r24	; 0x03
 362:	01 15       	cp	r16, r1
 364:	11 05       	cpc	r17, r1
 366:	71 f0       	breq	.+28     	; 0x384 <fdevopen+0x52>
 368:	13 87       	std	Z+11, r17	; 0x0b
 36a:	02 87       	std	Z+10, r16	; 0x0a
 36c:	81 e8       	ldi	r24, 0x81	; 129
 36e:	83 83       	std	Z+3, r24	; 0x03
 370:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <__data_end>
 374:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <__data_end+0x1>
 378:	89 2b       	or	r24, r25
 37a:	21 f4       	brne	.+8      	; 0x384 <fdevopen+0x52>
 37c:	f0 93 17 02 	sts	0x0217, r31	; 0x800217 <__data_end+0x1>
 380:	e0 93 16 02 	sts	0x0216, r30	; 0x800216 <__data_end>
 384:	20 97       	sbiw	r28, 0x00	; 0
 386:	c9 f0       	breq	.+50     	; 0x3ba <fdevopen+0x88>
 388:	d1 87       	std	Z+9, r29	; 0x09
 38a:	c0 87       	std	Z+8, r28	; 0x08
 38c:	83 81       	ldd	r24, Z+3	; 0x03
 38e:	82 60       	ori	r24, 0x02	; 2
 390:	83 83       	std	Z+3, r24	; 0x03
 392:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <__data_end+0x2>
 396:	90 91 19 02 	lds	r25, 0x0219	; 0x800219 <__data_end+0x3>
 39a:	89 2b       	or	r24, r25
 39c:	71 f4       	brne	.+28     	; 0x3ba <fdevopen+0x88>
 39e:	f0 93 19 02 	sts	0x0219, r31	; 0x800219 <__data_end+0x3>
 3a2:	e0 93 18 02 	sts	0x0218, r30	; 0x800218 <__data_end+0x2>
 3a6:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <__data_end+0x4>
 3aa:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <__data_end+0x5>
 3ae:	89 2b       	or	r24, r25
 3b0:	21 f4       	brne	.+8      	; 0x3ba <fdevopen+0x88>
 3b2:	f0 93 1b 02 	sts	0x021B, r31	; 0x80021b <__data_end+0x5>
 3b6:	e0 93 1a 02 	sts	0x021A, r30	; 0x80021a <__data_end+0x4>
 3ba:	cf 01       	movw	r24, r30
 3bc:	df 91       	pop	r29
 3be:	cf 91       	pop	r28
 3c0:	1f 91       	pop	r17
 3c2:	0f 91       	pop	r16
 3c4:	08 95       	ret

000003c6 <calloc>:
 3c6:	0f 93       	push	r16
 3c8:	1f 93       	push	r17
 3ca:	cf 93       	push	r28
 3cc:	df 93       	push	r29
 3ce:	86 9f       	mul	r24, r22
 3d0:	80 01       	movw	r16, r0
 3d2:	87 9f       	mul	r24, r23
 3d4:	10 0d       	add	r17, r0
 3d6:	96 9f       	mul	r25, r22
 3d8:	10 0d       	add	r17, r0
 3da:	11 24       	eor	r1, r1
 3dc:	c8 01       	movw	r24, r16
 3de:	0d d0       	rcall	.+26     	; 0x3fa <malloc>
 3e0:	ec 01       	movw	r28, r24
 3e2:	00 97       	sbiw	r24, 0x00	; 0
 3e4:	21 f0       	breq	.+8      	; 0x3ee <calloc+0x28>
 3e6:	a8 01       	movw	r20, r16
 3e8:	60 e0       	ldi	r22, 0x00	; 0
 3ea:	70 e0       	ldi	r23, 0x00	; 0
 3ec:	27 d1       	rcall	.+590    	; 0x63c <memset>
 3ee:	ce 01       	movw	r24, r28
 3f0:	df 91       	pop	r29
 3f2:	cf 91       	pop	r28
 3f4:	1f 91       	pop	r17
 3f6:	0f 91       	pop	r16
 3f8:	08 95       	ret

000003fa <malloc>:
 3fa:	0f 93       	push	r16
 3fc:	1f 93       	push	r17
 3fe:	cf 93       	push	r28
 400:	df 93       	push	r29
 402:	82 30       	cpi	r24, 0x02	; 2
 404:	91 05       	cpc	r25, r1
 406:	10 f4       	brcc	.+4      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 408:	82 e0       	ldi	r24, 0x02	; 2
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	e0 91 1e 02 	lds	r30, 0x021E	; 0x80021e <__flp>
 410:	f0 91 1f 02 	lds	r31, 0x021F	; 0x80021f <__flp+0x1>
 414:	20 e0       	ldi	r18, 0x00	; 0
 416:	30 e0       	ldi	r19, 0x00	; 0
 418:	a0 e0       	ldi	r26, 0x00	; 0
 41a:	b0 e0       	ldi	r27, 0x00	; 0
 41c:	30 97       	sbiw	r30, 0x00	; 0
 41e:	19 f1       	breq	.+70     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 420:	40 81       	ld	r20, Z
 422:	51 81       	ldd	r21, Z+1	; 0x01
 424:	02 81       	ldd	r16, Z+2	; 0x02
 426:	13 81       	ldd	r17, Z+3	; 0x03
 428:	48 17       	cp	r20, r24
 42a:	59 07       	cpc	r21, r25
 42c:	c8 f0       	brcs	.+50     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 42e:	84 17       	cp	r24, r20
 430:	95 07       	cpc	r25, r21
 432:	69 f4       	brne	.+26     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 434:	10 97       	sbiw	r26, 0x00	; 0
 436:	31 f0       	breq	.+12     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 438:	12 96       	adiw	r26, 0x02	; 2
 43a:	0c 93       	st	X, r16
 43c:	12 97       	sbiw	r26, 0x02	; 2
 43e:	13 96       	adiw	r26, 0x03	; 3
 440:	1c 93       	st	X, r17
 442:	27 c0       	rjmp	.+78     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 444:	00 93 1e 02 	sts	0x021E, r16	; 0x80021e <__flp>
 448:	10 93 1f 02 	sts	0x021F, r17	; 0x80021f <__flp+0x1>
 44c:	22 c0       	rjmp	.+68     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 44e:	21 15       	cp	r18, r1
 450:	31 05       	cpc	r19, r1
 452:	19 f0       	breq	.+6      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 454:	42 17       	cp	r20, r18
 456:	53 07       	cpc	r21, r19
 458:	18 f4       	brcc	.+6      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 45a:	9a 01       	movw	r18, r20
 45c:	bd 01       	movw	r22, r26
 45e:	ef 01       	movw	r28, r30
 460:	df 01       	movw	r26, r30
 462:	f8 01       	movw	r30, r16
 464:	db cf       	rjmp	.-74     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 466:	21 15       	cp	r18, r1
 468:	31 05       	cpc	r19, r1
 46a:	f9 f0       	breq	.+62     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 46c:	28 1b       	sub	r18, r24
 46e:	39 0b       	sbc	r19, r25
 470:	24 30       	cpi	r18, 0x04	; 4
 472:	31 05       	cpc	r19, r1
 474:	80 f4       	brcc	.+32     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 476:	8a 81       	ldd	r24, Y+2	; 0x02
 478:	9b 81       	ldd	r25, Y+3	; 0x03
 47a:	61 15       	cp	r22, r1
 47c:	71 05       	cpc	r23, r1
 47e:	21 f0       	breq	.+8      	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 480:	fb 01       	movw	r30, r22
 482:	93 83       	std	Z+3, r25	; 0x03
 484:	82 83       	std	Z+2, r24	; 0x02
 486:	04 c0       	rjmp	.+8      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 488:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <__flp+0x1>
 48c:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <__flp>
 490:	fe 01       	movw	r30, r28
 492:	32 96       	adiw	r30, 0x02	; 2
 494:	44 c0       	rjmp	.+136    	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
 496:	fe 01       	movw	r30, r28
 498:	e2 0f       	add	r30, r18
 49a:	f3 1f       	adc	r31, r19
 49c:	81 93       	st	Z+, r24
 49e:	91 93       	st	Z+, r25
 4a0:	22 50       	subi	r18, 0x02	; 2
 4a2:	31 09       	sbc	r19, r1
 4a4:	39 83       	std	Y+1, r19	; 0x01
 4a6:	28 83       	st	Y, r18
 4a8:	3a c0       	rjmp	.+116    	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
 4aa:	20 91 1c 02 	lds	r18, 0x021C	; 0x80021c <__brkval>
 4ae:	30 91 1d 02 	lds	r19, 0x021D	; 0x80021d <__brkval+0x1>
 4b2:	23 2b       	or	r18, r19
 4b4:	41 f4       	brne	.+16     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 4b6:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
 4ba:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
 4be:	30 93 1d 02 	sts	0x021D, r19	; 0x80021d <__brkval+0x1>
 4c2:	20 93 1c 02 	sts	0x021C, r18	; 0x80021c <__brkval>
 4c6:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 4ca:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 4ce:	21 15       	cp	r18, r1
 4d0:	31 05       	cpc	r19, r1
 4d2:	41 f4       	brne	.+16     	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
 4d4:	2d b7       	in	r18, 0x3d	; 61
 4d6:	3e b7       	in	r19, 0x3e	; 62
 4d8:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
 4dc:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
 4e0:	24 1b       	sub	r18, r20
 4e2:	35 0b       	sbc	r19, r21
 4e4:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <__brkval>
 4e8:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <__brkval+0x1>
 4ec:	e2 17       	cp	r30, r18
 4ee:	f3 07       	cpc	r31, r19
 4f0:	a0 f4       	brcc	.+40     	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
 4f2:	2e 1b       	sub	r18, r30
 4f4:	3f 0b       	sbc	r19, r31
 4f6:	28 17       	cp	r18, r24
 4f8:	39 07       	cpc	r19, r25
 4fa:	78 f0       	brcs	.+30     	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
 4fc:	ac 01       	movw	r20, r24
 4fe:	4e 5f       	subi	r20, 0xFE	; 254
 500:	5f 4f       	sbci	r21, 0xFF	; 255
 502:	24 17       	cp	r18, r20
 504:	35 07       	cpc	r19, r21
 506:	48 f0       	brcs	.+18     	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
 508:	4e 0f       	add	r20, r30
 50a:	5f 1f       	adc	r21, r31
 50c:	50 93 1d 02 	sts	0x021D, r21	; 0x80021d <__brkval+0x1>
 510:	40 93 1c 02 	sts	0x021C, r20	; 0x80021c <__brkval>
 514:	81 93       	st	Z+, r24
 516:	91 93       	st	Z+, r25
 518:	02 c0       	rjmp	.+4      	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
 51a:	e0 e0       	ldi	r30, 0x00	; 0
 51c:	f0 e0       	ldi	r31, 0x00	; 0
 51e:	cf 01       	movw	r24, r30
 520:	df 91       	pop	r29
 522:	cf 91       	pop	r28
 524:	1f 91       	pop	r17
 526:	0f 91       	pop	r16
 528:	08 95       	ret

0000052a <free>:
 52a:	cf 93       	push	r28
 52c:	df 93       	push	r29
 52e:	00 97       	sbiw	r24, 0x00	; 0
 530:	09 f4       	brne	.+2      	; 0x534 <free+0xa>
 532:	81 c0       	rjmp	.+258    	; 0x636 <free+0x10c>
 534:	fc 01       	movw	r30, r24
 536:	32 97       	sbiw	r30, 0x02	; 2
 538:	13 82       	std	Z+3, r1	; 0x03
 53a:	12 82       	std	Z+2, r1	; 0x02
 53c:	a0 91 1e 02 	lds	r26, 0x021E	; 0x80021e <__flp>
 540:	b0 91 1f 02 	lds	r27, 0x021F	; 0x80021f <__flp+0x1>
 544:	10 97       	sbiw	r26, 0x00	; 0
 546:	81 f4       	brne	.+32     	; 0x568 <free+0x3e>
 548:	20 81       	ld	r18, Z
 54a:	31 81       	ldd	r19, Z+1	; 0x01
 54c:	82 0f       	add	r24, r18
 54e:	93 1f       	adc	r25, r19
 550:	20 91 1c 02 	lds	r18, 0x021C	; 0x80021c <__brkval>
 554:	30 91 1d 02 	lds	r19, 0x021D	; 0x80021d <__brkval+0x1>
 558:	28 17       	cp	r18, r24
 55a:	39 07       	cpc	r19, r25
 55c:	51 f5       	brne	.+84     	; 0x5b2 <free+0x88>
 55e:	f0 93 1d 02 	sts	0x021D, r31	; 0x80021d <__brkval+0x1>
 562:	e0 93 1c 02 	sts	0x021C, r30	; 0x80021c <__brkval>
 566:	67 c0       	rjmp	.+206    	; 0x636 <free+0x10c>
 568:	ed 01       	movw	r28, r26
 56a:	20 e0       	ldi	r18, 0x00	; 0
 56c:	30 e0       	ldi	r19, 0x00	; 0
 56e:	ce 17       	cp	r28, r30
 570:	df 07       	cpc	r29, r31
 572:	40 f4       	brcc	.+16     	; 0x584 <free+0x5a>
 574:	4a 81       	ldd	r20, Y+2	; 0x02
 576:	5b 81       	ldd	r21, Y+3	; 0x03
 578:	9e 01       	movw	r18, r28
 57a:	41 15       	cp	r20, r1
 57c:	51 05       	cpc	r21, r1
 57e:	f1 f0       	breq	.+60     	; 0x5bc <free+0x92>
 580:	ea 01       	movw	r28, r20
 582:	f5 cf       	rjmp	.-22     	; 0x56e <free+0x44>
 584:	d3 83       	std	Z+3, r29	; 0x03
 586:	c2 83       	std	Z+2, r28	; 0x02
 588:	40 81       	ld	r20, Z
 58a:	51 81       	ldd	r21, Z+1	; 0x01
 58c:	84 0f       	add	r24, r20
 58e:	95 1f       	adc	r25, r21
 590:	c8 17       	cp	r28, r24
 592:	d9 07       	cpc	r29, r25
 594:	59 f4       	brne	.+22     	; 0x5ac <free+0x82>
 596:	88 81       	ld	r24, Y
 598:	99 81       	ldd	r25, Y+1	; 0x01
 59a:	84 0f       	add	r24, r20
 59c:	95 1f       	adc	r25, r21
 59e:	02 96       	adiw	r24, 0x02	; 2
 5a0:	91 83       	std	Z+1, r25	; 0x01
 5a2:	80 83       	st	Z, r24
 5a4:	8a 81       	ldd	r24, Y+2	; 0x02
 5a6:	9b 81       	ldd	r25, Y+3	; 0x03
 5a8:	93 83       	std	Z+3, r25	; 0x03
 5aa:	82 83       	std	Z+2, r24	; 0x02
 5ac:	21 15       	cp	r18, r1
 5ae:	31 05       	cpc	r19, r1
 5b0:	29 f4       	brne	.+10     	; 0x5bc <free+0x92>
 5b2:	f0 93 1f 02 	sts	0x021F, r31	; 0x80021f <__flp+0x1>
 5b6:	e0 93 1e 02 	sts	0x021E, r30	; 0x80021e <__flp>
 5ba:	3d c0       	rjmp	.+122    	; 0x636 <free+0x10c>
 5bc:	e9 01       	movw	r28, r18
 5be:	fb 83       	std	Y+3, r31	; 0x03
 5c0:	ea 83       	std	Y+2, r30	; 0x02
 5c2:	49 91       	ld	r20, Y+
 5c4:	59 91       	ld	r21, Y+
 5c6:	c4 0f       	add	r28, r20
 5c8:	d5 1f       	adc	r29, r21
 5ca:	ec 17       	cp	r30, r28
 5cc:	fd 07       	cpc	r31, r29
 5ce:	61 f4       	brne	.+24     	; 0x5e8 <free+0xbe>
 5d0:	80 81       	ld	r24, Z
 5d2:	91 81       	ldd	r25, Z+1	; 0x01
 5d4:	84 0f       	add	r24, r20
 5d6:	95 1f       	adc	r25, r21
 5d8:	02 96       	adiw	r24, 0x02	; 2
 5da:	e9 01       	movw	r28, r18
 5dc:	99 83       	std	Y+1, r25	; 0x01
 5de:	88 83       	st	Y, r24
 5e0:	82 81       	ldd	r24, Z+2	; 0x02
 5e2:	93 81       	ldd	r25, Z+3	; 0x03
 5e4:	9b 83       	std	Y+3, r25	; 0x03
 5e6:	8a 83       	std	Y+2, r24	; 0x02
 5e8:	e0 e0       	ldi	r30, 0x00	; 0
 5ea:	f0 e0       	ldi	r31, 0x00	; 0
 5ec:	12 96       	adiw	r26, 0x02	; 2
 5ee:	8d 91       	ld	r24, X+
 5f0:	9c 91       	ld	r25, X
 5f2:	13 97       	sbiw	r26, 0x03	; 3
 5f4:	00 97       	sbiw	r24, 0x00	; 0
 5f6:	19 f0       	breq	.+6      	; 0x5fe <free+0xd4>
 5f8:	fd 01       	movw	r30, r26
 5fa:	dc 01       	movw	r26, r24
 5fc:	f7 cf       	rjmp	.-18     	; 0x5ec <free+0xc2>
 5fe:	8d 91       	ld	r24, X+
 600:	9c 91       	ld	r25, X
 602:	11 97       	sbiw	r26, 0x01	; 1
 604:	9d 01       	movw	r18, r26
 606:	2e 5f       	subi	r18, 0xFE	; 254
 608:	3f 4f       	sbci	r19, 0xFF	; 255
 60a:	82 0f       	add	r24, r18
 60c:	93 1f       	adc	r25, r19
 60e:	20 91 1c 02 	lds	r18, 0x021C	; 0x80021c <__brkval>
 612:	30 91 1d 02 	lds	r19, 0x021D	; 0x80021d <__brkval+0x1>
 616:	28 17       	cp	r18, r24
 618:	39 07       	cpc	r19, r25
 61a:	69 f4       	brne	.+26     	; 0x636 <free+0x10c>
 61c:	30 97       	sbiw	r30, 0x00	; 0
 61e:	29 f4       	brne	.+10     	; 0x62a <free+0x100>
 620:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <__flp+0x1>
 624:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <__flp>
 628:	02 c0       	rjmp	.+4      	; 0x62e <free+0x104>
 62a:	13 82       	std	Z+3, r1	; 0x03
 62c:	12 82       	std	Z+2, r1	; 0x02
 62e:	b0 93 1d 02 	sts	0x021D, r27	; 0x80021d <__brkval+0x1>
 632:	a0 93 1c 02 	sts	0x021C, r26	; 0x80021c <__brkval>
 636:	df 91       	pop	r29
 638:	cf 91       	pop	r28
 63a:	08 95       	ret

0000063c <memset>:
 63c:	dc 01       	movw	r26, r24
 63e:	01 c0       	rjmp	.+2      	; 0x642 <memset+0x6>
 640:	6d 93       	st	X+, r22
 642:	41 50       	subi	r20, 0x01	; 1
 644:	50 40       	sbci	r21, 0x00	; 0
 646:	e0 f7       	brcc	.-8      	; 0x640 <memset+0x4>
 648:	08 95       	ret

0000064a <_exit>:
 64a:	f8 94       	cli

0000064c <__stop_program>:
 64c:	ff cf       	rjmp	.-2      	; 0x64c <__stop_program>
