
7Segment_LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800200  0000033c  000003b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000033c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003c2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003f4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  00000434  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000115f  00000000  00000000  000004c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c59  00000000  00000000  00001623  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000610  00000000  00000000  0000227c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000011c  00000000  00000000  0000288c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000646  00000000  00000000  000029a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000050e  00000000  00000000  00002fee  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  000034fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	65 c0       	rjmp	.+202    	; 0xcc <__ctors_end>
   2:	00 00       	nop
   4:	78 c0       	rjmp	.+240    	; 0xf6 <__bad_interrupt>
   6:	00 00       	nop
   8:	76 c0       	rjmp	.+236    	; 0xf6 <__bad_interrupt>
   a:	00 00       	nop
   c:	74 c0       	rjmp	.+232    	; 0xf6 <__bad_interrupt>
   e:	00 00       	nop
  10:	72 c0       	rjmp	.+228    	; 0xf6 <__bad_interrupt>
  12:	00 00       	nop
  14:	70 c0       	rjmp	.+224    	; 0xf6 <__bad_interrupt>
  16:	00 00       	nop
  18:	6e c0       	rjmp	.+220    	; 0xf6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6c c0       	rjmp	.+216    	; 0xf6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6a c0       	rjmp	.+212    	; 0xf6 <__bad_interrupt>
  22:	00 00       	nop
  24:	68 c0       	rjmp	.+208    	; 0xf6 <__bad_interrupt>
  26:	00 00       	nop
  28:	66 c0       	rjmp	.+204    	; 0xf6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	64 c0       	rjmp	.+200    	; 0xf6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	62 c0       	rjmp	.+196    	; 0xf6 <__bad_interrupt>
  32:	00 00       	nop
  34:	60 c0       	rjmp	.+192    	; 0xf6 <__bad_interrupt>
  36:	00 00       	nop
  38:	5e c0       	rjmp	.+188    	; 0xf6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5c c0       	rjmp	.+184    	; 0xf6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5a c0       	rjmp	.+180    	; 0xf6 <__bad_interrupt>
  42:	00 00       	nop
  44:	58 c0       	rjmp	.+176    	; 0xf6 <__bad_interrupt>
  46:	00 00       	nop
  48:	56 c0       	rjmp	.+172    	; 0xf6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	54 c0       	rjmp	.+168    	; 0xf6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	52 c0       	rjmp	.+164    	; 0xf6 <__bad_interrupt>
  52:	00 00       	nop
  54:	50 c0       	rjmp	.+160    	; 0xf6 <__bad_interrupt>
  56:	00 00       	nop
  58:	4e c0       	rjmp	.+156    	; 0xf6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4c c0       	rjmp	.+152    	; 0xf6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4a c0       	rjmp	.+148    	; 0xf6 <__bad_interrupt>
  62:	00 00       	nop
  64:	48 c0       	rjmp	.+144    	; 0xf6 <__bad_interrupt>
  66:	00 00       	nop
  68:	46 c0       	rjmp	.+140    	; 0xf6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	44 c0       	rjmp	.+136    	; 0xf6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	42 c0       	rjmp	.+132    	; 0xf6 <__bad_interrupt>
  72:	00 00       	nop
  74:	40 c0       	rjmp	.+128    	; 0xf6 <__bad_interrupt>
  76:	00 00       	nop
  78:	3e c0       	rjmp	.+124    	; 0xf6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3c c0       	rjmp	.+120    	; 0xf6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3a c0       	rjmp	.+116    	; 0xf6 <__bad_interrupt>
  82:	00 00       	nop
  84:	38 c0       	rjmp	.+112    	; 0xf6 <__bad_interrupt>
  86:	00 00       	nop
  88:	36 c0       	rjmp	.+108    	; 0xf6 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	34 c0       	rjmp	.+104    	; 0xf6 <__bad_interrupt>
  8e:	00 00       	nop
  90:	32 c0       	rjmp	.+100    	; 0xf6 <__bad_interrupt>
  92:	00 00       	nop
  94:	30 c0       	rjmp	.+96     	; 0xf6 <__bad_interrupt>
  96:	00 00       	nop
  98:	2e c0       	rjmp	.+92     	; 0xf6 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2c c0       	rjmp	.+88     	; 0xf6 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2a c0       	rjmp	.+84     	; 0xf6 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	28 c0       	rjmp	.+80     	; 0xf6 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	26 c0       	rjmp	.+76     	; 0xf6 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	24 c0       	rjmp	.+72     	; 0xf6 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	22 c0       	rjmp	.+68     	; 0xf6 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	20 c0       	rjmp	.+64     	; 0xf6 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1e c0       	rjmp	.+60     	; 0xf6 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1c c0       	rjmp	.+56     	; 0xf6 <__bad_interrupt>
  be:	00 00       	nop
  c0:	1a c0       	rjmp	.+52     	; 0xf6 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	18 c0       	rjmp	.+48     	; 0xf6 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	16 c0       	rjmp	.+44     	; 0xf6 <__bad_interrupt>
	...

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d1 e2       	ldi	r29, 0x21	; 33
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	12 e0       	ldi	r17, 0x02	; 2
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b2 e0       	ldi	r27, 0x02	; 2
  de:	ec e3       	ldi	r30, 0x3C	; 60
  e0:	f3 e0       	ldi	r31, 0x03	; 3
  e2:	00 e0       	ldi	r16, 0x00	; 0
  e4:	0b bf       	out	0x3b, r16	; 59
  e6:	02 c0       	rjmp	.+4      	; 0xec <__do_copy_data+0x14>
  e8:	07 90       	elpm	r0, Z+
  ea:	0d 92       	st	X+, r0
  ec:	a2 31       	cpi	r26, 0x12	; 18
  ee:	b1 07       	cpc	r27, r17
  f0:	d9 f7       	brne	.-10     	; 0xe8 <__do_copy_data+0x10>
  f2:	db d0       	rcall	.+438    	; 0x2aa <main>
  f4:	21 c1       	rjmp	.+578    	; 0x338 <_exit>

000000f6 <__bad_interrupt>:
  f6:	84 cf       	rjmp	.-248    	; 0x0 <__vectors>

000000f8 <fnd_write>:
    num_1 = num % 10;

    fnd_write_number(0, num_1, 0);
    fnd_write_number(1, num_10, 0);
    fnd_write_number(2, num_100, 0);
}
  f8:	9f b7       	in	r25, 0x3f	; 63
  fa:	f8 94       	cli
  fc:	84 bb       	out	0x14, r24	; 20
  fe:	68 b9       	out	0x08, r22	; 8
 100:	87 e0       	ldi	r24, 0x07	; 7
 102:	84 bb       	out	0x14, r24	; 20
 104:	99 23       	and	r25, r25
 106:	0c f4       	brge	.+2      	; 0x10a <fnd_write+0x12>
 108:	78 94       	sei
 10a:	08 95       	ret

0000010c <fnd_clear_all>:
 10c:	60 e0       	ldi	r22, 0x00	; 0
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	f3 df       	rcall	.-26     	; 0xf8 <fnd_write>
 112:	60 e0       	ldi	r22, 0x00	; 0
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	f0 df       	rcall	.-32     	; 0xf8 <fnd_write>
 118:	60 e0       	ldi	r22, 0x00	; 0
 11a:	82 e0       	ldi	r24, 0x02	; 2
 11c:	ed cf       	rjmp	.-38     	; 0xf8 <fnd_write>
 11e:	08 95       	ret

00000120 <fnd_write_number>:
 120:	e6 2f       	mov	r30, r22
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	ee 5f       	subi	r30, 0xFE	; 254
 126:	fd 4f       	sbci	r31, 0xFD	; 253
 128:	60 81       	ld	r22, Z
 12a:	90 e8       	ldi	r25, 0x80	; 128
 12c:	49 9f       	mul	r20, r25
 12e:	a0 01       	movw	r20, r0
 130:	11 24       	eor	r1, r1
 132:	64 2b       	or	r22, r20
 134:	e1 cf       	rjmp	.-62     	; 0xf8 <fnd_write>
 136:	08 95       	ret

00000138 <fnd_write_numbers_ultra>:

void fnd_write_numbers_ultra(uint16_t num){
 138:	ef 92       	push	r14
 13a:	ff 92       	push	r15
 13c:	0f 93       	push	r16
 13e:	1f 93       	push	r17
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	8c 01       	movw	r16, r24
	uint8_t dot_off = 0x00;
	uint8_t value_u4 = num  % 10;
 146:	9c 01       	movw	r18, r24
 148:	ad ec       	ldi	r26, 0xCD	; 205
 14a:	bc ec       	ldi	r27, 0xCC	; 204
 14c:	e6 d0       	rcall	.+460    	; 0x31a <__umulhisi3>
 14e:	fc 01       	movw	r30, r24
 150:	f6 95       	lsr	r31
 152:	e7 95       	ror	r30
 154:	f6 95       	lsr	r31
 156:	e7 95       	ror	r30
 158:	f6 95       	lsr	r31
 15a:	e7 95       	ror	r30
 15c:	cf 01       	movw	r24, r30
 15e:	88 0f       	add	r24, r24
 160:	99 1f       	adc	r25, r25
 162:	ee 0f       	add	r30, r30
 164:	ff 1f       	adc	r31, r31
 166:	ee 0f       	add	r30, r30
 168:	ff 1f       	adc	r31, r31
 16a:	ee 0f       	add	r30, r30
 16c:	ff 1f       	adc	r31, r31
 16e:	e8 0f       	add	r30, r24
 170:	f9 1f       	adc	r31, r25
 172:	c8 01       	movw	r24, r16
 174:	8e 1b       	sub	r24, r30
 176:	9f 0b       	sbc	r25, r31
 178:	fc 01       	movw	r30, r24
	uint8_t value_u6 = (num / 10) % 10;
 17a:	cf d0       	rcall	.+414    	; 0x31a <__umulhisi3>
 17c:	ac 01       	movw	r20, r24
 17e:	56 95       	lsr	r21
 180:	47 95       	ror	r20
 182:	56 95       	lsr	r21
 184:	47 95       	ror	r20
 186:	56 95       	lsr	r21
 188:	47 95       	ror	r20
 18a:	9a 01       	movw	r18, r20
 18c:	c6 d0       	rcall	.+396    	; 0x31a <__umulhisi3>
 18e:	96 95       	lsr	r25
 190:	87 95       	ror	r24
 192:	96 95       	lsr	r25
 194:	87 95       	ror	r24
 196:	96 95       	lsr	r25
 198:	87 95       	ror	r24
 19a:	9c 01       	movw	r18, r24
 19c:	22 0f       	add	r18, r18
 19e:	33 1f       	adc	r19, r19
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	88 0f       	add	r24, r24
 1a6:	99 1f       	adc	r25, r25
 1a8:	88 0f       	add	r24, r24
 1aa:	99 1f       	adc	r25, r25
 1ac:	82 0f       	add	r24, r18
 1ae:	93 1f       	adc	r25, r19
 1b0:	c4 2f       	mov	r28, r20
 1b2:	c8 1b       	sub	r28, r24
 1b4:	98 01       	movw	r18, r16
	uint8_t value_u8 = num / 100;
 1b6:	36 95       	lsr	r19
 1b8:	27 95       	ror	r18
 1ba:	36 95       	lsr	r19
 1bc:	27 95       	ror	r18
 1be:	ab e7       	ldi	r26, 0x7B	; 123
 1c0:	b4 e1       	ldi	r27, 0x14	; 20
 1c2:	ab d0       	rcall	.+342    	; 0x31a <__umulhisi3>
 1c4:	7c 01       	movw	r14, r24
 1c6:	f6 94       	lsr	r15
 1c8:	e7 94       	ror	r14
 1ca:	0a 30       	cpi	r16, 0x0A	; 10
	
	if(num < 10){
 1cc:	11 05       	cpc	r17, r1
 1ce:	58 f4       	brcc	.+22     	; 0x1e6 <fnd_write_numbers_ultra+0xae>
		fnd_write_number(0, value_u4, dot_off);
 1d0:	40 e0       	ldi	r20, 0x00	; 0
 1d2:	6e 2f       	mov	r22, r30
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	a4 df       	rcall	.-184    	; 0x120 <fnd_write_number>
		fnd_write(1, 0);
 1d8:	60 e0       	ldi	r22, 0x00	; 0
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	8d df       	rcall	.-230    	; 0xf8 <fnd_write>
		fnd_write(2, 0);
 1de:	60 e0       	ldi	r22, 0x00	; 0
 1e0:	82 e0       	ldi	r24, 0x02	; 2
 1e2:	8a df       	rcall	.-236    	; 0xf8 <fnd_write>
 1e4:	18 c0       	rjmp	.+48     	; 0x216 <fnd_write_numbers_ultra+0xde>
	}
	else if(num < 100) {
 1e6:	04 36       	cpi	r16, 0x64	; 100
 1e8:	11 05       	cpc	r17, r1
 1ea:	48 f4       	brcc	.+18     	; 0x1fe <fnd_write_numbers_ultra+0xc6>
		fnd_write_number(0, value_u4, dot_off);
 1ec:	40 e0       	ldi	r20, 0x00	; 0
 1ee:	6e 2f       	mov	r22, r30
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	96 df       	rcall	.-212    	; 0x120 <fnd_write_number>
		fnd_write_number(1, value_u6, dot_off);
 1f4:	40 e0       	ldi	r20, 0x00	; 0
 1f6:	6c 2f       	mov	r22, r28
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	92 df       	rcall	.-220    	; 0x120 <fnd_write_number>
	}
	else {
		fnd_write_number(0, value_u4, dot_off);
 1fc:	0c c0       	rjmp	.+24     	; 0x216 <fnd_write_numbers_ultra+0xde>
 1fe:	40 e0       	ldi	r20, 0x00	; 0
 200:	6e 2f       	mov	r22, r30
 202:	80 e0       	ldi	r24, 0x00	; 0
		fnd_write_number(1, value_u6, dot_off);
 204:	8d df       	rcall	.-230    	; 0x120 <fnd_write_number>
 206:	40 e0       	ldi	r20, 0x00	; 0
 208:	6c 2f       	mov	r22, r28
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	89 df       	rcall	.-238    	; 0x120 <fnd_write_number>
		fnd_write_number(2, value_u8, dot_off);
 20e:	40 e0       	ldi	r20, 0x00	; 0
 210:	6e 2d       	mov	r22, r14
 212:	82 e0       	ldi	r24, 0x02	; 2
 214:	85 df       	rcall	.-246    	; 0x120 <fnd_write_number>
 216:	df 91       	pop	r29
	}
}
 218:	cf 91       	pop	r28
 21a:	1f 91       	pop	r17
 21c:	0f 91       	pop	r16
 21e:	ff 90       	pop	r15
 220:	ef 90       	pop	r14
 222:	08 95       	ret

00000224 <led_write>:
 224:	9f b7       	in	r25, 0x3f	; 63
void led_write(uint8_t value)
{
    uint8_t sreg;
    
    sreg = SREG;            // save SREG
    cli();                  // disable interrupt to prevent shared-data problem
 226:	f8 94       	cli
 * arguments
 *  - fnd_num: FND number (2 ~ 0)
 * -------------------------------------------------------------------------- */
inline static void fnd_select(uint8_t fnd_num)
{
    PORTG = fnd_num;
 228:	23 e0       	ldi	r18, 0x03	; 3
 22a:	24 bb       	out	0x14, r18	; 20
    
    sreg = SREG;            // save SREG
    cli();                  // disable interrupt to prevent shared-data problem

    fnd_select(3);
    PORTC = value;
 22c:	88 b9       	out	0x08, r24	; 8
/* ----------------------------------------------------------------------------
 * deselect selected FND
 * -------------------------------------------------------------------------- */
inline static void fnd_deselect(void)
{
    PORTG = 0x07;
 22e:	87 e0       	ldi	r24, 0x07	; 7
 230:	84 bb       	out	0x14, r24	; 20

    fnd_select(3);
    PORTC = value;
    fnd_deselect();

    if(sreg&0x80)           // if global interrupt was enabled before executing cli()
 232:	99 23       	and	r25, r25
 234:	0c f4       	brge	.+2      	; 0x238 <led_write+0x14>
        sei();              // enable interrupt        
 236:	78 94       	sei
 238:	08 95       	ret

0000023a <fnd_init>:
 * initialize port for FND/LED interface
 * -------------------------------------------------------------------------- */
inline static void fnd_port_init(void)
{
    // configure output
    DDRC = 0xff;            // PORTC[7..0]
 23a:	8f ef       	ldi	r24, 0xFF	; 255
 23c:	87 b9       	out	0x07, r24	; 7
    DDRG = 0x07;            // PORTG[2..0]
 23e:	87 e0       	ldi	r24, 0x07	; 7
 240:	83 bb       	out	0x13, r24	; 19
    DDRB |= _BV(LED_COLOR);
 242:	84 b1       	in	r24, 0x04	; 4
 244:	80 61       	ori	r24, 0x10	; 16
 246:	84 b9       	out	0x04, r24	; 4
 * initialize FND/LED
 * -------------------------------------------------------------------------- */
void fnd_init(void)
{
    fnd_port_init();
    fnd_clear_all();
 248:	61 df       	rcall	.-318    	; 0x10c <fnd_clear_all>
    led_write(0xff);
 24a:	8f ef       	ldi	r24, 0xFF	; 255
 24c:	eb cf       	rjmp	.-42     	; 0x224 <led_write>
 24e:	08 95       	ret

00000250 <switch_hit>:

uint8_t switch_hit(void){
	static uint8_t prev_state = _BV(SW2);
	uint8_t cur_state;
	
	cur_state = PINE & _BV(SW2);
 250:	8c b1       	in	r24, 0x0c	; 12
 252:	80 78       	andi	r24, 0x80	; 128
	if(prev_state != cur_state) {
 254:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <prev_state.1953>
 258:	89 17       	cp	r24, r25
 25a:	31 f0       	breq	.+12     	; 0x268 <switch_hit+0x18>
		prev_state = cur_state;
 25c:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <prev_state.1953>
		if(!cur_state) return 1;
 260:	81 11       	cpse	r24, r1
 262:	04 c0       	rjmp	.+8      	; 0x26c <switch_hit+0x1c>
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	08 95       	ret
		else return 0;
	}
	else
		return 0;
 268:	80 e0       	ldi	r24, 0x00	; 0
 26a:	08 95       	ret
	
	cur_state = PINE & _BV(SW2);
	if(prev_state != cur_state) {
		prev_state = cur_state;
		if(!cur_state) return 1;
		else return 0;
 26c:	80 e0       	ldi	r24, 0x00	; 0
	}
	else
		return 0;
}
 26e:	08 95       	ret

00000270 <switch_hit_sw3>:
uint8_t switch_hit_sw3(void){
	static uint8_t prev_state = _BV(SW3);
	uint8_t cur_state;
	
	cur_state = PIND & _BV(SW3);
 270:	89 b1       	in	r24, 0x09	; 9
 272:	88 70       	andi	r24, 0x08	; 8
	if(prev_state != cur_state) {
 274:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 278:	89 17       	cp	r24, r25
 27a:	31 f0       	breq	.+12     	; 0x288 <switch_hit_sw3+0x18>
		prev_state = cur_state;
 27c:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
		if(!cur_state) return 1;
 280:	81 11       	cpse	r24, r1
 282:	04 c0       	rjmp	.+8      	; 0x28c <switch_hit_sw3+0x1c>
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	08 95       	ret
		else return 0;
	}
	else
	return 0;
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	08 95       	ret
	
	cur_state = PIND & _BV(SW3);
	if(prev_state != cur_state) {
		prev_state = cur_state;
		if(!cur_state) return 1;
		else return 0;
 28c:	80 e0       	ldi	r24, 0x00	; 0
	}
	else
	return 0;
}
 28e:	08 95       	ret

00000290 <ioport_init>:

void ioport_init(void){
	DDRB |= _BV(LED_COLOR);
 290:	84 b1       	in	r24, 0x04	; 4
 292:	80 61       	ori	r24, 0x10	; 16
 294:	84 b9       	out	0x04, r24	; 4
	DDRC |= _BV(LED1) | _BV(LED2) | _BV(LED3) | _BV(LED4);
 296:	87 b1       	in	r24, 0x07	; 7
 298:	8f 60       	ori	r24, 0x0F	; 15
 29a:	87 b9       	out	0x07, r24	; 7
	PORTE |= _BV(SW2);
 29c:	8e b1       	in	r24, 0x0e	; 14
 29e:	80 68       	ori	r24, 0x80	; 128
 2a0:	8e b9       	out	0x0e, r24	; 14
	PORTD |= _BV(SW3) | _BV(SW4) | _BV(SW5);
 2a2:	8b b1       	in	r24, 0x0b	; 11
 2a4:	88 63       	ori	r24, 0x38	; 56
 2a6:	8b b9       	out	0x0b, r24	; 11
 2a8:	08 95       	ret

000002aa <main>:
int main(void)
{
	uint16_t fnd_num= 0;
	int8_t mode = 0;
	
	ioport_init();
 2aa:	f2 df       	rcall	.-28     	; 0x290 <ioport_init>
	fnd_init();
 2ac:	c6 df       	rcall	.-116    	; 0x23a <fnd_init>
	
	led_write(0xff);
 2ae:	8f ef       	ldi	r24, 0xFF	; 255
 2b0:	b9 df       	rcall	.-142    	; 0x224 <led_write>
 2b2:	10 e0       	ldi	r17, 0x00	; 0
// mode 0 : fnd stop - mode 1 : fnd_value increase 

int main(void)
{
	uint16_t fnd_num= 0;
	int8_t mode = 0;
 2b4:	c0 e0       	ldi	r28, 0x00	; 0

// mode 0 : fnd stop - mode 1 : fnd_value increase 

int main(void)
{
	uint16_t fnd_num= 0;
 2b6:	d0 e0       	ldi	r29, 0x00	; 0
 2b8:	02 c0       	rjmp	.+4      	; 0x2be <main+0x14>
			fnd_write_numbers_ultra(fnd_num);
			led_write(0x00);
		}
		
		if(fnd_num == 1000){
			fnd_num = 0;
 2ba:	c0 e0       	ldi	r28, 0x00	; 0
 2bc:	d0 e0       	ldi	r29, 0x00	; 0
	
	led_write(0xff);
	
	while (1)
	{
		if(switch_hit()){
 2be:	c8 df       	rcall	.-112    	; 0x250 <switch_hit>
 2c0:	88 23       	and	r24, r24
 2c2:	21 f0       	breq	.+8      	; 0x2cc <main+0x22>
 2c4:	81 e0       	ldi	r24, 0x01	; 1
			mode = !mode;
 2c6:	11 11       	cpse	r17, r1
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	18 2f       	mov	r17, r24
		}
		
		if(switch_hit_sw3()){
 2cc:	d1 df       	rcall	.-94     	; 0x270 <switch_hit_sw3>
 2ce:	88 23       	and	r24, r24
 2d0:	31 f0       	breq	.+12     	; 0x2de <main+0x34>
 2d2:	95 b1       	in	r25, 0x05	; 5
			PORTB ^= _BV(LED_COLOR);
 2d4:	80 e1       	ldi	r24, 0x10	; 16
 2d6:	89 27       	eor	r24, r25
 2d8:	85 b9       	out	0x05, r24	; 5
 2da:	c0 e0       	ldi	r28, 0x00	; 0
			fnd_num = 0;
 2dc:	d0 e0       	ldi	r29, 0x00	; 0
 2de:	11 23       	and	r17, r17
		}

		if(mode){
 2e0:	99 f0       	breq	.+38     	; 0x308 <main+0x5e>
 2e2:	7e 01       	movw	r14, r28
			fnd_write_numbers_ultra(fnd_num++);
 2e4:	2f ef       	ldi	r18, 0xFF	; 255
 2e6:	e2 1a       	sub	r14, r18
 2e8:	f2 0a       	sbc	r15, r18
 2ea:	ce 01       	movw	r24, r28
 2ec:	25 df       	rcall	.-438    	; 0x138 <fnd_write_numbers_ultra>
			led_write(0xff);
 2ee:	8f ef       	ldi	r24, 0xFF	; 255
 2f0:	99 df       	rcall	.-206    	; 0x224 <led_write>
 2f2:	8f ef       	ldi	r24, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2f4:	91 ee       	ldi	r25, 0xE1	; 225
 2f6:	24 e0       	ldi	r18, 0x04	; 4
 2f8:	81 50       	subi	r24, 0x01	; 1
 2fa:	90 40       	sbci	r25, 0x00	; 0
 2fc:	20 40       	sbci	r18, 0x00	; 0
 2fe:	e1 f7       	brne	.-8      	; 0x2f8 <main+0x4e>
 300:	00 c0       	rjmp	.+0      	; 0x302 <main+0x58>
			PORTB ^= _BV(LED_COLOR);
			fnd_num = 0;
		}

		if(mode){
			fnd_write_numbers_ultra(fnd_num++);
 302:	00 00       	nop
 304:	e7 01       	movw	r28, r14
			led_write(0xff);
			_delay_ms(100);
			}else{
			fnd_write_numbers_ultra(fnd_num);
 306:	04 c0       	rjmp	.+8      	; 0x310 <main+0x66>
 308:	ce 01       	movw	r24, r28
 30a:	16 df       	rcall	.-468    	; 0x138 <fnd_write_numbers_ultra>
			led_write(0x00);
 30c:	80 e0       	ldi	r24, 0x00	; 0
 30e:	8a df       	rcall	.-236    	; 0x224 <led_write>
 310:	c8 3e       	cpi	r28, 0xE8	; 232
		}
		
		if(fnd_num == 1000){
 312:	83 e0       	ldi	r24, 0x03	; 3
 314:	d8 07       	cpc	r29, r24
 316:	99 f6       	brne	.-90     	; 0x2be <main+0x14>
 318:	d0 cf       	rjmp	.-96     	; 0x2ba <main+0x10>

0000031a <__umulhisi3>:
 31a:	a2 9f       	mul	r26, r18
 31c:	b0 01       	movw	r22, r0
 31e:	b3 9f       	mul	r27, r19
 320:	c0 01       	movw	r24, r0
 322:	a3 9f       	mul	r26, r19
 324:	70 0d       	add	r23, r0
 326:	81 1d       	adc	r24, r1
 328:	11 24       	eor	r1, r1
 32a:	91 1d       	adc	r25, r1
 32c:	b2 9f       	mul	r27, r18
 32e:	70 0d       	add	r23, r0
 330:	81 1d       	adc	r24, r1
 332:	11 24       	eor	r1, r1
 334:	91 1d       	adc	r25, r1
 336:	08 95       	ret

00000338 <_exit>:
 338:	f8 94       	cli

0000033a <__stop_program>:
 33a:	ff cf       	rjmp	.-2      	; 0x33a <__stop_program>
