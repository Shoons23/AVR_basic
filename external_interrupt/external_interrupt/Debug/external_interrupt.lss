
external_interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800200  00000444  000004d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000444  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800220  00800220  000004f8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004f8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000528  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000568  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001048  00000000  00000000  000005f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c77  00000000  00000000  00001640  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000058e  00000000  00000000  000022b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000019c  00000000  00000000  00002848  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000622  00000000  00000000  000029e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000445  00000000  00000000  00003006  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  0000344b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	65 c0       	rjmp	.+202    	; 0xcc <__ctors_end>
   2:	00 00       	nop
   4:	80 c0       	rjmp	.+256    	; 0x106 <__bad_interrupt>
   6:	00 00       	nop
   8:	7e c0       	rjmp	.+252    	; 0x106 <__bad_interrupt>
   a:	00 00       	nop
   c:	7c c0       	rjmp	.+248    	; 0x106 <__bad_interrupt>
   e:	00 00       	nop
  10:	27 c1       	rjmp	.+590    	; 0x260 <__vector_4>
  12:	00 00       	nop
  14:	78 c0       	rjmp	.+240    	; 0x106 <__bad_interrupt>
  16:	00 00       	nop
  18:	76 c0       	rjmp	.+236    	; 0x106 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	74 c0       	rjmp	.+232    	; 0x106 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6c c1       	rjmp	.+728    	; 0x2fa <__vector_8>
  22:	00 00       	nop
  24:	70 c0       	rjmp	.+224    	; 0x106 <__bad_interrupt>
  26:	00 00       	nop
  28:	6e c0       	rjmp	.+220    	; 0x106 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6c c0       	rjmp	.+216    	; 0x106 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6a c0       	rjmp	.+212    	; 0x106 <__bad_interrupt>
  32:	00 00       	nop
  34:	68 c0       	rjmp	.+208    	; 0x106 <__bad_interrupt>
  36:	00 00       	nop
  38:	66 c0       	rjmp	.+204    	; 0x106 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	64 c0       	rjmp	.+200    	; 0x106 <__bad_interrupt>
  3e:	00 00       	nop
  40:	62 c0       	rjmp	.+196    	; 0x106 <__bad_interrupt>
  42:	00 00       	nop
  44:	60 c0       	rjmp	.+192    	; 0x106 <__bad_interrupt>
  46:	00 00       	nop
  48:	5e c0       	rjmp	.+188    	; 0x106 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5c c0       	rjmp	.+184    	; 0x106 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5a c0       	rjmp	.+180    	; 0x106 <__bad_interrupt>
  52:	00 00       	nop
  54:	58 c0       	rjmp	.+176    	; 0x106 <__bad_interrupt>
  56:	00 00       	nop
  58:	56 c0       	rjmp	.+172    	; 0x106 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	54 c0       	rjmp	.+168    	; 0x106 <__bad_interrupt>
  5e:	00 00       	nop
  60:	52 c0       	rjmp	.+164    	; 0x106 <__bad_interrupt>
  62:	00 00       	nop
  64:	50 c0       	rjmp	.+160    	; 0x106 <__bad_interrupt>
  66:	00 00       	nop
  68:	4e c0       	rjmp	.+156    	; 0x106 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4c c0       	rjmp	.+152    	; 0x106 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4a c0       	rjmp	.+148    	; 0x106 <__bad_interrupt>
  72:	00 00       	nop
  74:	48 c0       	rjmp	.+144    	; 0x106 <__bad_interrupt>
  76:	00 00       	nop
  78:	46 c0       	rjmp	.+140    	; 0x106 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	44 c0       	rjmp	.+136    	; 0x106 <__bad_interrupt>
  7e:	00 00       	nop
  80:	42 c0       	rjmp	.+132    	; 0x106 <__bad_interrupt>
  82:	00 00       	nop
  84:	40 c0       	rjmp	.+128    	; 0x106 <__bad_interrupt>
  86:	00 00       	nop
  88:	3e c0       	rjmp	.+124    	; 0x106 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3c c0       	rjmp	.+120    	; 0x106 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3a c0       	rjmp	.+116    	; 0x106 <__bad_interrupt>
  92:	00 00       	nop
  94:	38 c0       	rjmp	.+112    	; 0x106 <__bad_interrupt>
  96:	00 00       	nop
  98:	36 c0       	rjmp	.+108    	; 0x106 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	34 c0       	rjmp	.+104    	; 0x106 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	32 c0       	rjmp	.+100    	; 0x106 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	30 c0       	rjmp	.+96     	; 0x106 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2e c0       	rjmp	.+92     	; 0x106 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2c c0       	rjmp	.+88     	; 0x106 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2a c0       	rjmp	.+84     	; 0x106 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	28 c0       	rjmp	.+80     	; 0x106 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	26 c0       	rjmp	.+76     	; 0x106 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	24 c0       	rjmp	.+72     	; 0x106 <__bad_interrupt>
  be:	00 00       	nop
  c0:	22 c0       	rjmp	.+68     	; 0x106 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	20 c0       	rjmp	.+64     	; 0x106 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1e c0       	rjmp	.+60     	; 0x106 <__bad_interrupt>
	...

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d1 e2       	ldi	r29, 0x21	; 33
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	12 e0       	ldi	r17, 0x02	; 2
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b2 e0       	ldi	r27, 0x02	; 2
  de:	e4 e4       	ldi	r30, 0x44	; 68
  e0:	f4 e0       	ldi	r31, 0x04	; 4
  e2:	00 e0       	ldi	r16, 0x00	; 0
  e4:	0b bf       	out	0x3b, r16	; 59
  e6:	02 c0       	rjmp	.+4      	; 0xec <__do_copy_data+0x14>
  e8:	07 90       	elpm	r0, Z+
  ea:	0d 92       	st	X+, r0
  ec:	a0 32       	cpi	r26, 0x20	; 32
  ee:	b1 07       	cpc	r27, r17
  f0:	d9 f7       	brne	.-10     	; 0xe8 <__do_copy_data+0x10>

000000f2 <__do_clear_bss>:
  f2:	22 e0       	ldi	r18, 0x02	; 2
  f4:	a0 e2       	ldi	r26, 0x20	; 32
  f6:	b2 e0       	ldi	r27, 0x02	; 2
  f8:	01 c0       	rjmp	.+2      	; 0xfc <.do_clear_bss_start>

000000fa <.do_clear_bss_loop>:
  fa:	1d 92       	st	X+, r1

000000fc <.do_clear_bss_start>:
  fc:	a3 32       	cpi	r26, 0x23	; 35
  fe:	b2 07       	cpc	r27, r18
 100:	e1 f7       	brne	.-8      	; 0xfa <.do_clear_bss_loop>
 102:	58 d1       	rcall	.+688    	; 0x3b4 <main>
 104:	9d c1       	rjmp	.+826    	; 0x440 <_exit>

00000106 <__bad_interrupt>:
 106:	7c cf       	rjmp	.-264    	; 0x0 <__vectors>

00000108 <fnd_write>:
 * arguments
 *  - fnd_num: FND number (2 ~ 0)
 * -------------------------------------------------------------------------- */
inline void fnd_clear(uint8_t fnd_num)
{
    fnd_write(fnd_num, 0);
 108:	9f b7       	in	r25, 0x3f	; 63
 10a:	f8 94       	cli
 10c:	84 bb       	out	0x14, r24	; 20
 10e:	68 b9       	out	0x08, r22	; 8
 110:	87 e0       	ldi	r24, 0x07	; 7
 112:	84 bb       	out	0x14, r24	; 20
 114:	99 23       	and	r25, r25
 116:	0c f4       	brge	.+2      	; 0x11a <fnd_write+0x12>
 118:	78 94       	sei
 11a:	08 95       	ret

0000011c <fnd_clear_all>:
/* ----------------------------------------------------------------------------
 * clear all FNDs 
 * -------------------------------------------------------------------------- */
void fnd_clear_all(void)
{
    fnd_write(0, 0);
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	f3 df       	rcall	.-26     	; 0x108 <fnd_write>
    fnd_write(1, 0);
 122:	60 e0       	ldi	r22, 0x00	; 0
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	f0 df       	rcall	.-32     	; 0x108 <fnd_write>
	fnd_write(2, 0);
 128:	60 e0       	ldi	r22, 0x00	; 0
 12a:	82 e0       	ldi	r24, 0x02	; 2
 12c:	ed cf       	rjmp	.-38     	; 0x108 <fnd_write>
 12e:	08 95       	ret

00000130 <fnd_write_number>:
{
    static uint8_t num_code[] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x27, 0x7f, 0x6f,
                                  0x77, 0x7c, 0x39, 0x5e, 0x79, 0x71};
    uint8_t value;
    
    value = num_code[num] | (dot_on<<7);
 130:	e6 2f       	mov	r30, r22
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	e0 5f       	subi	r30, 0xF0	; 240
 136:	fd 4f       	sbci	r31, 0xFD	; 253
 138:	60 81       	ld	r22, Z
 13a:	90 e8       	ldi	r25, 0x80	; 128
 13c:	49 9f       	mul	r20, r25
 13e:	a0 01       	movw	r20, r0
 140:	11 24       	eor	r1, r1
 142:	64 2b       	or	r22, r20
    fnd_write(fnd_num, value);    
 144:	e1 cf       	rjmp	.-62     	; 0x108 <fnd_write>
 146:	08 95       	ret

00000148 <fnd_write_numbers>:
}

void fnd_write_numbers(uint16_t num){
 148:	ef 92       	push	r14
 14a:	ff 92       	push	r15
 14c:	0f 93       	push	r16
 14e:	1f 93       	push	r17
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	8c 01       	movw	r16, r24
    uint8_t dot_off = 0x00;
    uint8_t value_u4 = num  % 10;
 156:	9c 01       	movw	r18, r24
 158:	ad ec       	ldi	r26, 0xCD	; 205
 15a:	bc ec       	ldi	r27, 0xCC	; 204
 15c:	62 d1       	rcall	.+708    	; 0x422 <__umulhisi3>
 15e:	fc 01       	movw	r30, r24
 160:	f6 95       	lsr	r31
 162:	e7 95       	ror	r30
 164:	f6 95       	lsr	r31
 166:	e7 95       	ror	r30
 168:	f6 95       	lsr	r31
 16a:	e7 95       	ror	r30
 16c:	cf 01       	movw	r24, r30
 16e:	88 0f       	add	r24, r24
 170:	99 1f       	adc	r25, r25
 172:	ee 0f       	add	r30, r30
 174:	ff 1f       	adc	r31, r31
 176:	ee 0f       	add	r30, r30
 178:	ff 1f       	adc	r31, r31
 17a:	ee 0f       	add	r30, r30
 17c:	ff 1f       	adc	r31, r31
 17e:	e8 0f       	add	r30, r24
 180:	f9 1f       	adc	r31, r25
 182:	c8 01       	movw	r24, r16
 184:	8e 1b       	sub	r24, r30
 186:	9f 0b       	sbc	r25, r31
 188:	fc 01       	movw	r30, r24
	uint8_t value_u6 = (num / 10) % 10;
 18a:	4b d1       	rcall	.+662    	; 0x422 <__umulhisi3>
 18c:	ac 01       	movw	r20, r24
 18e:	56 95       	lsr	r21
 190:	47 95       	ror	r20
 192:	56 95       	lsr	r21
 194:	47 95       	ror	r20
 196:	56 95       	lsr	r21
 198:	47 95       	ror	r20
 19a:	9a 01       	movw	r18, r20
 19c:	42 d1       	rcall	.+644    	; 0x422 <__umulhisi3>
 19e:	96 95       	lsr	r25
 1a0:	87 95       	ror	r24
 1a2:	96 95       	lsr	r25
 1a4:	87 95       	ror	r24
 1a6:	96 95       	lsr	r25
 1a8:	87 95       	ror	r24
 1aa:	9c 01       	movw	r18, r24
 1ac:	22 0f       	add	r18, r18
 1ae:	33 1f       	adc	r19, r19
 1b0:	88 0f       	add	r24, r24
 1b2:	99 1f       	adc	r25, r25
 1b4:	88 0f       	add	r24, r24
 1b6:	99 1f       	adc	r25, r25
 1b8:	88 0f       	add	r24, r24
 1ba:	99 1f       	adc	r25, r25
 1bc:	82 0f       	add	r24, r18
 1be:	93 1f       	adc	r25, r19
 1c0:	c4 2f       	mov	r28, r20
 1c2:	c8 1b       	sub	r28, r24
 1c4:	98 01       	movw	r18, r16
	uint8_t value_u8 = num / 100;
 1c6:	36 95       	lsr	r19
 1c8:	27 95       	ror	r18
 1ca:	36 95       	lsr	r19
 1cc:	27 95       	ror	r18
 1ce:	ab e7       	ldi	r26, 0x7B	; 123
 1d0:	b4 e1       	ldi	r27, 0x14	; 20
 1d2:	27 d1       	rcall	.+590    	; 0x422 <__umulhisi3>
 1d4:	7c 01       	movw	r14, r24
 1d6:	f6 94       	lsr	r15
 1d8:	e7 94       	ror	r14
 1da:	0a 30       	cpi	r16, 0x0A	; 10
	
	if(num < 10){
 1dc:	11 05       	cpc	r17, r1
 1de:	58 f4       	brcc	.+22     	; 0x1f6 <fnd_write_numbers+0xae>
		fnd_write_number(0, value_u4, dot_off);
 1e0:	40 e0       	ldi	r20, 0x00	; 0
 1e2:	6e 2f       	mov	r22, r30
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	a4 df       	rcall	.-184    	; 0x130 <fnd_write_number>
		fnd_write(1, 0);
 1e8:	60 e0       	ldi	r22, 0x00	; 0
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	8d df       	rcall	.-230    	; 0x108 <fnd_write>
		fnd_write(2, 0);
 1ee:	60 e0       	ldi	r22, 0x00	; 0
 1f0:	82 e0       	ldi	r24, 0x02	; 2
 1f2:	8a df       	rcall	.-236    	; 0x108 <fnd_write>
 1f4:	18 c0       	rjmp	.+48     	; 0x226 <fnd_write_numbers+0xde>
	}
	else if(num < 100) {
 1f6:	04 36       	cpi	r16, 0x64	; 100
 1f8:	11 05       	cpc	r17, r1
 1fa:	48 f4       	brcc	.+18     	; 0x20e <fnd_write_numbers+0xc6>
		fnd_write_number(0, value_u4, dot_off);
 1fc:	40 e0       	ldi	r20, 0x00	; 0
 1fe:	6e 2f       	mov	r22, r30
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	96 df       	rcall	.-212    	; 0x130 <fnd_write_number>
		fnd_write_number(1, value_u6, dot_off);
 204:	40 e0       	ldi	r20, 0x00	; 0
 206:	6c 2f       	mov	r22, r28
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	92 df       	rcall	.-220    	; 0x130 <fnd_write_number>
		}
	else {
	    fnd_write_number(0, value_u4, dot_off);
 20c:	0c c0       	rjmp	.+24     	; 0x226 <fnd_write_numbers+0xde>
 20e:	40 e0       	ldi	r20, 0x00	; 0
 210:	6e 2f       	mov	r22, r30
 212:	80 e0       	ldi	r24, 0x00	; 0
	    fnd_write_number(1, value_u6, dot_off);
 214:	8d df       	rcall	.-230    	; 0x130 <fnd_write_number>
 216:	40 e0       	ldi	r20, 0x00	; 0
 218:	6c 2f       	mov	r22, r28
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	89 df       	rcall	.-238    	; 0x130 <fnd_write_number>
	    fnd_write_number(2, value_u8, dot_off);
 21e:	40 e0       	ldi	r20, 0x00	; 0
 220:	6e 2d       	mov	r22, r14
 222:	82 e0       	ldi	r24, 0x02	; 2
 224:	85 df       	rcall	.-246    	; 0x130 <fnd_write_number>
 226:	df 91       	pop	r29
	}
}
 228:	cf 91       	pop	r28
 22a:	1f 91       	pop	r17
 22c:	0f 91       	pop	r16
 22e:	ff 90       	pop	r15
 230:	ef 90       	pop	r14
 232:	08 95       	ret

00000234 <led_write>:
 234:	9f b7       	in	r25, 0x3f	; 63
void led_write(uint8_t value)
{
    uint8_t sreg;
    
    sreg = SREG;            // save SREG
    cli();                  // disable interrupt to prevent shared-data problem
 236:	f8 94       	cli
 * arguments
 *  - fnd_num: FND number (2 ~ 0)
 * -------------------------------------------------------------------------- */
inline static void fnd_select(uint8_t fnd_num)
{
    PORTG = fnd_num;
 238:	23 e0       	ldi	r18, 0x03	; 3
 23a:	24 bb       	out	0x14, r18	; 20
    
    sreg = SREG;            // save SREG
    cli();                  // disable interrupt to prevent shared-data problem

    fnd_select(3);
    PORTC = value;
 23c:	88 b9       	out	0x08, r24	; 8
/* ----------------------------------------------------------------------------
 * deselect selected FND
 * -------------------------------------------------------------------------- */
inline static void fnd_deselect(void)
{
    PORTG = 0x07;
 23e:	87 e0       	ldi	r24, 0x07	; 7
 240:	84 bb       	out	0x14, r24	; 20

    fnd_select(3);
    PORTC = value;
    fnd_deselect();

    if(sreg&0x80)           // if global interrupt was enabled before executing cli()
 242:	99 23       	and	r25, r25
 244:	0c f4       	brge	.+2      	; 0x248 <led_write+0x14>
        sei();              // enable interrupt        
 246:	78 94       	sei
 248:	08 95       	ret

0000024a <fnd_init>:
 * initialize port for FND/LED interface
 * -------------------------------------------------------------------------- */
inline static void fnd_port_init(void)
{
    // configure output
    DDRC = 0xff;            // PORTC[7..0]
 24a:	8f ef       	ldi	r24, 0xFF	; 255
 24c:	87 b9       	out	0x07, r24	; 7
    DDRG = 0x07;            // PORTG[2..0]
 24e:	87 e0       	ldi	r24, 0x07	; 7
 250:	83 bb       	out	0x13, r24	; 19
    DDRB |= _BV(LED_COLOR);
 252:	84 b1       	in	r24, 0x04	; 4
 254:	80 61       	ori	r24, 0x10	; 16
 256:	84 b9       	out	0x04, r24	; 4
 * initialize FND/LED
 * -------------------------------------------------------------------------- */
void fnd_init(void)
{
    fnd_port_init();
    fnd_clear_all();
 258:	61 df       	rcall	.-318    	; 0x11c <fnd_clear_all>
    led_write(0xff);
 25a:	8f ef       	ldi	r24, 0xFF	; 255
 25c:	eb cf       	rjmp	.-42     	; 0x234 <led_write>
 25e:	08 95       	ret

00000260 <__vector_4>:
#include "fnd.h"

uint16_t fnd_num = 0;
uint8_t i = 0;

ISR(INT3_vect){
 260:	1f 92       	push	r1
 262:	0f 92       	push	r0
 264:	0f b6       	in	r0, 0x3f	; 63
 266:	0f 92       	push	r0
 268:	11 24       	eor	r1, r1
 26a:	0b b6       	in	r0, 0x3b	; 59
 26c:	0f 92       	push	r0
 26e:	2f 93       	push	r18
 270:	3f 93       	push	r19
 272:	4f 93       	push	r20
 274:	5f 93       	push	r21
 276:	6f 93       	push	r22
 278:	7f 93       	push	r23
 27a:	8f 93       	push	r24
 27c:	9f 93       	push	r25
 27e:	af 93       	push	r26
 280:	bf 93       	push	r27
 282:	ef 93       	push	r30
 284:	ff 93       	push	r31
	fnd_num = (fnd_num+1000-1)%1000;
 286:	40 91 21 02 	lds	r20, 0x0221	; 0x800221 <fnd_num>
 28a:	50 91 22 02 	lds	r21, 0x0222	; 0x800222 <fnd_num+0x1>
 28e:	49 51       	subi	r20, 0x19	; 25
 290:	5c 4f       	sbci	r21, 0xFC	; 252
 292:	9a 01       	movw	r18, r20
 294:	36 95       	lsr	r19
 296:	27 95       	ror	r18
 298:	36 95       	lsr	r19
 29a:	27 95       	ror	r18
 29c:	36 95       	lsr	r19
 29e:	27 95       	ror	r18
 2a0:	a5 ec       	ldi	r26, 0xC5	; 197
 2a2:	b0 e2       	ldi	r27, 0x20	; 32
 2a4:	be d0       	rcall	.+380    	; 0x422 <__umulhisi3>
 2a6:	92 95       	swap	r25
 2a8:	82 95       	swap	r24
 2aa:	8f 70       	andi	r24, 0x0F	; 15
 2ac:	89 27       	eor	r24, r25
 2ae:	9f 70       	andi	r25, 0x0F	; 15
 2b0:	89 27       	eor	r24, r25
 2b2:	68 ee       	ldi	r22, 0xE8	; 232
 2b4:	73 e0       	ldi	r23, 0x03	; 3
 2b6:	86 9f       	mul	r24, r22
 2b8:	90 01       	movw	r18, r0
 2ba:	87 9f       	mul	r24, r23
 2bc:	30 0d       	add	r19, r0
 2be:	96 9f       	mul	r25, r22
 2c0:	30 0d       	add	r19, r0
 2c2:	11 24       	eor	r1, r1
 2c4:	ca 01       	movw	r24, r20
 2c6:	82 1b       	sub	r24, r18
 2c8:	93 0b       	sbc	r25, r19
 2ca:	90 93 22 02 	sts	0x0222, r25	; 0x800222 <fnd_num+0x1>
 2ce:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <fnd_num>
	fnd_write_numbers(fnd_num);
 2d2:	3a df       	rcall	.-396    	; 0x148 <fnd_write_numbers>
 2d4:	ff 91       	pop	r31
}
 2d6:	ef 91       	pop	r30
 2d8:	bf 91       	pop	r27
 2da:	af 91       	pop	r26
 2dc:	9f 91       	pop	r25
 2de:	8f 91       	pop	r24
 2e0:	7f 91       	pop	r23
 2e2:	6f 91       	pop	r22
 2e4:	5f 91       	pop	r21
 2e6:	4f 91       	pop	r20
 2e8:	3f 91       	pop	r19
 2ea:	2f 91       	pop	r18
 2ec:	0f 90       	pop	r0
 2ee:	0b be       	out	0x3b, r0	; 59
 2f0:	0f 90       	pop	r0
 2f2:	0f be       	out	0x3f, r0	; 63
 2f4:	0f 90       	pop	r0
 2f6:	1f 90       	pop	r1
 2f8:	18 95       	reti

000002fa <__vector_8>:
 2fa:	1f 92       	push	r1
ISR(INT7_vect){
 2fc:	0f 92       	push	r0
 2fe:	0f b6       	in	r0, 0x3f	; 63
 300:	0f 92       	push	r0
 302:	11 24       	eor	r1, r1
 304:	2f 93       	push	r18
 306:	3f 93       	push	r19
 308:	4f 93       	push	r20
 30a:	5f 93       	push	r21
 30c:	6f 93       	push	r22
 30e:	7f 93       	push	r23
 310:	8f 93       	push	r24
 312:	9f 93       	push	r25
 314:	af 93       	push	r26
 316:	bf 93       	push	r27
	if(!(PINE&_BV(SW2)))
 318:	67 99       	sbic	0x0c, 7	; 12
 31a:	27 c0       	rjmp	.+78     	; 0x36a <__vector_8+0x70>
		fnd_num = (fnd_num+1)%1000;
 31c:	40 91 21 02 	lds	r20, 0x0221	; 0x800221 <fnd_num>
 320:	50 91 22 02 	lds	r21, 0x0222	; 0x800222 <fnd_num+0x1>
 324:	4f 5f       	subi	r20, 0xFF	; 255
 326:	5f 4f       	sbci	r21, 0xFF	; 255
 328:	9a 01       	movw	r18, r20
 32a:	36 95       	lsr	r19
 32c:	27 95       	ror	r18
 32e:	36 95       	lsr	r19
 330:	27 95       	ror	r18
 332:	36 95       	lsr	r19
 334:	27 95       	ror	r18
 336:	a5 ec       	ldi	r26, 0xC5	; 197
 338:	b0 e2       	ldi	r27, 0x20	; 32
 33a:	73 d0       	rcall	.+230    	; 0x422 <__umulhisi3>
 33c:	92 95       	swap	r25
 33e:	82 95       	swap	r24
 340:	8f 70       	andi	r24, 0x0F	; 15
 342:	89 27       	eor	r24, r25
 344:	9f 70       	andi	r25, 0x0F	; 15
 346:	89 27       	eor	r24, r25
 348:	68 ee       	ldi	r22, 0xE8	; 232
 34a:	73 e0       	ldi	r23, 0x03	; 3
 34c:	86 9f       	mul	r24, r22
 34e:	90 01       	movw	r18, r0
 350:	87 9f       	mul	r24, r23
 352:	30 0d       	add	r19, r0
 354:	96 9f       	mul	r25, r22
 356:	30 0d       	add	r19, r0
 358:	11 24       	eor	r1, r1
 35a:	ca 01       	movw	r24, r20
 35c:	82 1b       	sub	r24, r18
 35e:	93 0b       	sbc	r25, r19
 360:	90 93 22 02 	sts	0x0222, r25	; 0x800222 <fnd_num+0x1>
 364:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <fnd_num>
 368:	03 c0       	rjmp	.+6      	; 0x370 <__vector_8+0x76>
	else
		i = 7;
 36a:	87 e0       	ldi	r24, 0x07	; 7
 36c:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <__data_end>
}
 370:	bf 91       	pop	r27
 372:	af 91       	pop	r26
 374:	9f 91       	pop	r25
 376:	8f 91       	pop	r24
 378:	7f 91       	pop	r23
 37a:	6f 91       	pop	r22
 37c:	5f 91       	pop	r21
 37e:	4f 91       	pop	r20
 380:	3f 91       	pop	r19
 382:	2f 91       	pop	r18
 384:	0f 90       	pop	r0
 386:	0f be       	out	0x3f, r0	; 63
 388:	0f 90       	pop	r0
 38a:	1f 90       	pop	r1
 38c:	18 95       	reti

0000038e <ioport_init>:

void ioport_init(){
	DDRC |= _BV(LED1) | _BV(LED2) | _BV(LED3) | _BV(LED4);
 38e:	87 b1       	in	r24, 0x07	; 7
 390:	8f 60       	ori	r24, 0x0F	; 15
 392:	87 b9       	out	0x07, r24	; 7
	PORTC |= _BV(LED1) | _BV(LED2) | _BV(LED3) | _BV(LED4);
 394:	88 b1       	in	r24, 0x08	; 8
 396:	8f 60       	ori	r24, 0x0F	; 15
 398:	88 b9       	out	0x08, r24	; 8
	PORTE |= _BV(SW2);
 39a:	8e b1       	in	r24, 0x0e	; 14
 39c:	80 68       	ori	r24, 0x80	; 128
 39e:	8e b9       	out	0x0e, r24	; 14
 3a0:	08 95       	ret

000003a2 <interrupt_init>:
}
void interrupt_init(){
	EICRA = _BV(ISC31); // External Interrupt Control Register A
 3a2:	80 e8       	ldi	r24, 0x80	; 128
 3a4:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	EICRB = _BV(ISC71); // External Interrupt Control Register B
 3a8:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	EIMSK = _BV(INT7) | _BV(INT3); // External Interrupt Mask Register
 3ac:	88 e8       	ldi	r24, 0x88	; 136
 3ae:	8d bb       	out	0x1d, r24	; 29
	sei(); // global interrupt flag set
 3b0:	78 94       	sei
 3b2:	08 95       	ret

000003b4 <main>:
}

int main(void) { 
 3b4:	cf 93       	push	r28
 3b6:	df 93       	push	r29
 3b8:	cd b7       	in	r28, 0x3d	; 61
 3ba:	de b7       	in	r29, 0x3e	; 62
 3bc:	60 97       	sbiw	r28, 0x10	; 16
 3be:	0f b6       	in	r0, 0x3f	; 63
 3c0:	f8 94       	cli
 3c2:	de bf       	out	0x3e, r29	; 62
 3c4:	0f be       	out	0x3f, r0	; 63
 3c6:	cd bf       	out	0x3d, r28	; 61
	 uint16_t led_pattern[] = {
 3c8:	80 e1       	ldi	r24, 0x10	; 16
 3ca:	e0 e0       	ldi	r30, 0x00	; 0
 3cc:	f2 e0       	ldi	r31, 0x02	; 2
 3ce:	de 01       	movw	r26, r28
 3d0:	11 96       	adiw	r26, 0x01	; 1
 3d2:	01 90       	ld	r0, Z+
 3d4:	0d 92       	st	X+, r0
 3d6:	8a 95       	dec	r24
 3d8:	e1 f7       	brne	.-8      	; 0x3d2 <main+0x1e>
		 _BV(LED3) | _BV(LED4) | _BV(LED5),
		 _BV(LED4) | _BV(LED5),
		 0x00
	 };

	 ioport_init();
 3da:	d9 df       	rcall	.-78     	; 0x38e <ioport_init>
	 interrupt_init();
 3dc:	e2 df       	rcall	.-60     	; 0x3a2 <interrupt_init>
	 fnd_init();
 3de:	35 df       	rcall	.-406    	; 0x24a <fnd_init>
 3e0:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <fnd_num>

	while (1)
	{
		fnd_write_numbers(fnd_num);
 3e4:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <fnd_num+0x1>
 3e8:	af de       	rcall	.-674    	; 0x148 <fnd_write_numbers>
 3ea:	e0 91 20 02 	lds	r30, 0x0220	; 0x800220 <__data_end>
		led_write(led_pattern[i++%8]);
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	8e 0f       	add	r24, r30
 3f2:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <__data_end>
 3f6:	e7 70       	andi	r30, 0x07	; 7
 3f8:	f0 e0       	ldi	r31, 0x00	; 0
 3fa:	ee 0f       	add	r30, r30
 3fc:	ff 1f       	adc	r31, r31
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	8c 0f       	add	r24, r28
 404:	9d 1f       	adc	r25, r29
 406:	e8 0f       	add	r30, r24
 408:	f9 1f       	adc	r31, r25
 40a:	80 81       	ld	r24, Z
 40c:	13 df       	rcall	.-474    	; 0x234 <led_write>
 40e:	9f ef       	ldi	r25, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 410:	24 e3       	ldi	r18, 0x34	; 52
 412:	8c e0       	ldi	r24, 0x0C	; 12
 414:	91 50       	subi	r25, 0x01	; 1
 416:	20 40       	sbci	r18, 0x00	; 0
 418:	80 40       	sbci	r24, 0x00	; 0
 41a:	e1 f7       	brne	.-8      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 41c:	00 c0       	rjmp	.+0      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 41e:	00 00       	nop
 420:	df cf       	rjmp	.-66     	; 0x3e0 <main+0x2c>

00000422 <__umulhisi3>:
 422:	a2 9f       	mul	r26, r18
 424:	b0 01       	movw	r22, r0
 426:	b3 9f       	mul	r27, r19
 428:	c0 01       	movw	r24, r0
 42a:	a3 9f       	mul	r26, r19
 42c:	70 0d       	add	r23, r0
 42e:	81 1d       	adc	r24, r1
 430:	11 24       	eor	r1, r1
 432:	91 1d       	adc	r25, r1
 434:	b2 9f       	mul	r27, r18
 436:	70 0d       	add	r23, r0
 438:	81 1d       	adc	r24, r1
 43a:	11 24       	eor	r1, r1
 43c:	91 1d       	adc	r25, r1
 43e:	08 95       	ret

00000440 <_exit>:
 440:	f8 94       	cli

00000442 <__stop_program>:
 442:	ff cf       	rjmp	.-2      	; 0x442 <__stop_program>
